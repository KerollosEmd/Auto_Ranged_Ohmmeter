
Auto_Ranged_Ohm_meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003620  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00003620  000036b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800186  00800186  000037da  2**0
                  ALLOC
  3 .stab         00002c34  00000000  00000000  000037dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011e7  00000000  00000000  00006410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000075f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007797  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007989  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b11a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c2f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__vector_1>
       8:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__vector_2>
       c:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 23 09 	call	0x1246	; 0x1246 <main>
      8a:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e6       	ldi	r22, 0x69	; 105
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 58       	subi	r30, 0x8F	; 143
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:

static u8 ADC_u8BusyFlag = ADC_u8_NOT_BUSY;

static void (*ADC_PtrToFun)(/*void*/u16) = NULL;

void ADC_voidInit(void) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*select vref= AVCC*/
	ADC_u8SetREF(ADC_u8_AVCC);
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <ADC_u8SetREF>

	/*select right adjustment*/
	ADC_u8ResultAdjustment(ADC_u8_RIGHT_ADJUST_RES);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <ADC_u8ResultAdjustment>

	/*single conversion mode*/
	ADC_voidAutoTriggerDisable();
     e42:	0e 94 e5 08 	call	0x11ca	; 0x11ca <ADC_voidAutoTriggerDisable>

	/*adc enable */
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADEN);
     e46:	a6 e2       	ldi	r26, 0x26	; 38
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e6 e2       	ldi	r30, 0x26	; 38
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	80 68       	ori	r24, 0x80	; 128
     e52:	8c 93       	st	X, r24

	/*Select Prescaler*/
	ADC_u8SetPrescaler(ADC_u8_PS_CLK_BY_64);
     e54:	86 e0       	ldi	r24, 0x06	; 6
     e56:	0e 94 8d 08 	call	0x111a	; 0x111a <ADC_u8SetPrescaler>
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <ADC_voidConfig>:

void ADC_voidConfig(void) {
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
	ADC_u8_ADMUX_REG = PRIVATE_u8_CONC_ADMUX(ADC_u8_MUXREG_REFS_BITS,
     e68:	e7 e2       	ldi	r30, 0x27	; 39
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	86 e4       	ldi	r24, 0x46	; 70
     e6e:	80 83       	st	Z, r24
			ADC_u8_MUXREG_LAR_BITS, ADC_u8_MUXREG_MUX_BITS);

}
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <ADC_u8GetDigitalValueSync>:
 * 2- Address of the Returned Digital Value stored in the ADC Data register of type unsigned integer 16 bit
 *
 * <<<<<<<<<<<<<<<<<<<Hint>>>>>>>>>>>>>>>>>>>>>>>>>>>
 * The function stuck until the flag is cleared  */
u8 ADC_u8GetDigitalValueSync(u8 Copy_u8ChannelNum,
		u16* Copy_u16ReturnedDigitalValue) {
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <ADC_u8GetDigitalValueSync+0x6>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <ADC_u8GetDigitalValueSync+0x8>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	8a 83       	std	Y+2, r24	; 0x02
     e84:	7c 83       	std	Y+4, r23	; 0x04
     e86:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	89 83       	std	Y+1, r24	; 0x01

//	u32 Local_u32TimeOutCounter = 0;

	if (ADC_u8SetChannelandGain(Copy_u8ChannelNum)
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	0e 94 3a 08 	call	0x1074	; 0x1074 <ADC_u8SetChannelandGain>
     e92:	88 23       	and	r24, r24
     e94:	99 f1       	breq	.+102    	; 0xefc <ADC_u8GetDigitalValueSync+0x86>
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	79 f1       	breq	.+94     	; 0xefc <ADC_u8GetDigitalValueSync+0x86>
			&& (Copy_u16ReturnedDigitalValue != NULL)) {
		//start conversion
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADSC);
     e9e:	a6 e2       	ldi	r26, 0x26	; 38
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e6 e2       	ldi	r30, 0x26	; 38
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 64       	ori	r24, 0x40	; 64
     eaa:	8c 93       	st	X, r24
		while ((!GET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADIF))
				&& (Local_u32TimeOutCounter < 1000000UL))
			Local_u32TimeOutCounter++;
*/

		while (!GET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADIF));
     eac:	e6 e2       	ldi	r30, 0x26	; 38
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	82 95       	swap	r24
     eb4:	8f 70       	andi	r24, 0x0F	; 15
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	81 70       	andi	r24, 0x01	; 1
     ebc:	90 70       	andi	r25, 0x00	; 0
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	a9 f3       	breq	.-22     	; 0xeac <ADC_u8GetDigitalValueSync+0x36>

		//Check flag
		if (GET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADIF)) {
     ec2:	e6 e2       	ldi	r30, 0x26	; 38
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	82 95       	swap	r24
     eca:	8f 70       	andi	r24, 0x0F	; 15
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	90 70       	andi	r25, 0x00	; 0
     ed4:	88 23       	and	r24, r24
     ed6:	81 f0       	breq	.+32     	; 0xef8 <ADC_u8GetDigitalValueSync+0x82>

			//clear flag
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADIF);
     ed8:	a6 e2       	ldi	r26, 0x26	; 38
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e6 e2       	ldi	r30, 0x26	; 38
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 61       	ori	r24, 0x10	; 16
     ee4:	8c 93       	st	X, r24

			//read digital value
			*Copy_u16ReturnedDigitalValue = ADC_u16_ADCDATA_REG;
     ee6:	e4 e2       	ldi	r30, 0x24	; 36
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	91 81       	ldd	r25, Z+1	; 0x01
     eee:	eb 81       	ldd	r30, Y+3	; 0x03
     ef0:	fc 81       	ldd	r31, Y+4	; 0x04
     ef2:	91 83       	std	Z+1, r25	; 0x01
     ef4:	80 83       	st	Z, r24
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <ADC_u8GetDigitalValueSync+0x88>
		} else {
			Local_u8ErrorState = STD_TYPES_NOTOK;
     ef8:	19 82       	std	Y+1, r1	; 0x01
     efa:	01 c0       	rjmp	.+2      	; 0xefe <ADC_u8GetDigitalValueSync+0x88>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOTOK;
     efc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     efe:	89 81       	ldd	r24, Y+1	; 0x01
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <ADC_u8GetDigitalValue8bitsSync>:
 * 2- Address of the Returned Digital Value stored in the ADC Data register of type unsigned integer 8 bits
 *
 * <<<<<<<<<<<<<<<<<<<Hint>>>>>>>>>>>>>>>>>>>>>>>>>>>
 * The function stuck until the flag is cleared  */
u8 ADC_u8GetDigitalValue8bitsSync(u8 Copy_u8ChannelNum,
		u8* Copy_u8ReturnedDigitalValue) {
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <ADC_u8GetDigitalValue8bitsSync+0x6>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <ADC_u8GetDigitalValue8bitsSync+0x8>
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	8a 83       	std	Y+2, r24	; 0x02
     f1c:	7c 83       	std	Y+4, r23	; 0x04
     f1e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	89 83       	std	Y+1, r24	; 0x01

	if (ADC_u8SetChannelandGain(Copy_u8ChannelNum)
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	0e 94 3a 08 	call	0x1074	; 0x1074 <ADC_u8SetChannelandGain>
     f2a:	88 23       	and	r24, r24
     f2c:	21 f1       	breq	.+72     	; 0xf76 <ADC_u8GetDigitalValue8bitsSync+0x68>
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	01 f1       	breq	.+64     	; 0xf76 <ADC_u8GetDigitalValue8bitsSync+0x68>
			&& (Copy_u8ReturnedDigitalValue != NULL)) {
		//start conversion
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADSC);
     f36:	a6 e2       	ldi	r26, 0x26	; 38
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e6 e2       	ldi	r30, 0x26	; 38
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 64       	ori	r24, 0x40	; 64
     f42:	8c 93       	st	X, r24

		//wait for the flag
		while (!GET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADIF))
     f44:	e6 e2       	ldi	r30, 0x26	; 38
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	82 95       	swap	r24
     f4c:	8f 70       	andi	r24, 0x0F	; 15
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	81 70       	andi	r24, 0x01	; 1
     f54:	90 70       	andi	r25, 0x00	; 0
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	a9 f3       	breq	.-22     	; 0xf44 <ADC_u8GetDigitalValue8bitsSync+0x36>
			;

		//clear flag
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADIF);
     f5a:	a6 e2       	ldi	r26, 0x26	; 38
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e6 e2       	ldi	r30, 0x26	; 38
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 61       	ori	r24, 0x10	; 16
     f66:	8c 93       	st	X, r24

		//read digital value
		*Copy_u8ReturnedDigitalValue = ADC_u8_ADCH_REG;
     f68:	e5 e2       	ldi	r30, 0x25	; 37
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	eb 81       	ldd	r30, Y+3	; 0x03
     f70:	fc 81       	ldd	r31, Y+4	; 0x04
     f72:	80 83       	st	Z, r24
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <ADC_u8GetDigitalValue8bitsSync+0x6a>

	} else {
		Local_u8ErrorState = STD_TYPES_NOTOK;
     f76:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     f78:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <ADC_u8GetDigitalValueAsync>:
 * 2- Address of Notification function with input argument of STD_TYPE u16 to store in it the digital value
 *
 * <<<<<<<<<<<<<<<<<<<Hint>>>>>>>>>>>>>>>>>>>>>>>>>>>
 * The Notification function called when the ADC_flag is cleared  */
u8 ADC_u8GetDigitalValueAsync(u8 Copy_u8ChannelNum, /*u16* Copy_u16ReturnedDigitalValue,*/
		void (*Copy_PtrToFun)(/*void*/u16)) {
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <ADC_u8GetDigitalValueAsync+0x6>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <ADC_u8GetDigitalValueAsync+0x8>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	8a 83       	std	Y+2, r24	; 0x02
     f96:	7c 83       	std	Y+4, r23	; 0x04
     f98:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	89 83       	std	Y+1, r24	; 0x01

	//Check Channel Number , Check Pointers
	if ((ADC_u8BusyFlag == ADC_u8_NOT_BUSY)
     f9e:	80 91 86 01 	lds	r24, 0x0186
     fa2:	88 23       	and	r24, r24
     fa4:	e9 f4       	brne	.+58     	; 0xfe0 <ADC_u8GetDigitalValueAsync+0x58>
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	0e 94 3a 08 	call	0x1074	; 0x1074 <ADC_u8SetChannelandGain>
     fac:	88 23       	and	r24, r24
     fae:	c1 f0       	breq	.+48     	; 0xfe0 <ADC_u8GetDigitalValueAsync+0x58>
			&& ADC_u8SetChannelandGain(
					Copy_u8ChannelNum)/*&&(Copy_u16ReturnedDigitalValue!=NULL)*/) {
		//Change  Busy flag into Busy state
		ADC_u8BusyFlag = ADC_u8_BUSY;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	80 93 86 01 	sts	0x0186, r24
		//update Global pointers with the input addresses
		/*ADC_Ptru16DigitalValue = Copy_u16ReturnedDigitalValue;*/
		ADC_PtrToFun = Copy_PtrToFun;
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	90 93 88 01 	sts	0x0188, r25
     fbe:	80 93 87 01 	sts	0x0187, r24
		//Select ADC Channel
		/*done it in the if condition*/
		//ADC Interrupt enable
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADIE);
     fc2:	a6 e2       	ldi	r26, 0x26	; 38
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e6 e2       	ldi	r30, 0x26	; 38
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	88 60       	ori	r24, 0x08	; 8
     fce:	8c 93       	st	X, r24
		//ADC Start Conversion
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADSC);
     fd0:	a6 e2       	ldi	r26, 0x26	; 38
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e6 e2       	ldi	r30, 0x26	; 38
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 64       	ori	r24, 0x40	; 64
     fdc:	8c 93       	st	X, r24
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <ADC_u8GetDigitalValueAsync+0x5a>

	} else {
		Local_u8ErrorState = STD_TYPES_NOTOK;
     fe0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <__vector_16>:

/*ISR of ADC*/
void __vector_16(void) __attribute__((signal));
void __vector_16(void) {
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	2f 93       	push	r18
     ffe:	3f 93       	push	r19
    1000:	4f 93       	push	r20
    1002:	5f 93       	push	r21
    1004:	6f 93       	push	r22
    1006:	7f 93       	push	r23
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
    100c:	af 93       	push	r26
    100e:	bf 93       	push	r27
    1010:	ef 93       	push	r30
    1012:	ff 93       	push	r31
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	if ((ADC_PtrToFun != NULL)/*&&(ADC_Ptru16DigitalValue!=NULL)*/) {
    101c:	80 91 87 01 	lds	r24, 0x0187
    1020:	90 91 88 01 	lds	r25, 0x0188
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	99 f0       	breq	.+38     	; 0x104e <__vector_16+0x5c>
		//Update digital value
		/**ADC_Ptru16DigitalValue=ADC_u16_ADCDATA_REG;*/
		//Call Notification Function
		ADC_PtrToFun(ADC_u16_ADCDATA_REG);
    1028:	20 91 87 01 	lds	r18, 0x0187
    102c:	30 91 88 01 	lds	r19, 0x0188
    1030:	e4 e2       	ldi	r30, 0x24	; 36
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	f9 01       	movw	r30, r18
    103a:	09 95       	icall
		//Disable Interrupt
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADIE);
    103c:	a6 e2       	ldi	r26, 0x26	; 38
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e6 e2       	ldi	r30, 0x26	; 38
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	87 7f       	andi	r24, 0xF7	; 247
    1048:	8c 93       	st	X, r24
		//Set Busy flag into Not Busy state
		ADC_u8BusyFlag = ADC_u8_NOT_BUSY;
    104a:	10 92 86 01 	sts	0x0186, r1
	}
}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	ff 91       	pop	r31
    1054:	ef 91       	pop	r30
    1056:	bf 91       	pop	r27
    1058:	af 91       	pop	r26
    105a:	9f 91       	pop	r25
    105c:	8f 91       	pop	r24
    105e:	7f 91       	pop	r23
    1060:	6f 91       	pop	r22
    1062:	5f 91       	pop	r21
    1064:	4f 91       	pop	r20
    1066:	3f 91       	pop	r19
    1068:	2f 91       	pop	r18
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	0f 90       	pop	r0
    1070:	1f 90       	pop	r1
    1072:	18 95       	reti

00001074 <ADC_u8SetChannelandGain>:

u8 ADC_u8SetChannelandGain(u8 Copy_u8ChannelGain) {
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <ADC_u8SetChannelandGain+0x6>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8ChannelGain < ADC_u8_CHANNEL_NUM) {
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 32       	cpi	r24, 0x20	; 32
    1088:	80 f4       	brcc	.+32     	; 0x10aa <ADC_u8SetChannelandGain+0x36>
		//Clear Channel and Gain in the ADMUX Register
		ADC_u8_ADMUX_REG &= ADC_u8_CLR_MUX_BITS;
    108a:	a7 e2       	ldi	r26, 0x27	; 39
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e7 e2       	ldi	r30, 0x27	; 39
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 7e       	andi	r24, 0xE0	; 224
    1096:	8c 93       	st	X, r24

		//Set Channel and Gain in the ADMUX Register
		ADC_u8_ADMUX_REG |= Copy_u8ChannelGain;
    1098:	a7 e2       	ldi	r26, 0x27	; 39
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e7 e2       	ldi	r30, 0x27	; 39
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	90 81       	ld	r25, Z
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	89 2b       	or	r24, r25
    10a6:	8c 93       	st	X, r24
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <ADC_u8SetChannelandGain+0x38>

	} else {
		Local_u8ErrorState = STD_TYPES_NOTOK;
    10aa:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <ADC_u8SetREF>:
 -->For applying the Internal 2.56V Voltage
 Reference with extarnal Capacitor on AREF Pin:       (ADC_u8_2_56V_IVREF)
 <<<<<Hint>>>>>
 The internal voltage reference options may not be
 used if an external reference voltage is being applied to the AREF pin.*/
u8 ADC_u8SetREF(u8 Copy_u8REF) {
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <ADC_u8SetREF+0x6>
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8REF < ADC_u8_VREF_NUM)
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	f8 f4       	brcc	.+62     	; 0x110c <ADC_u8SetREF+0x54>
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	e1 f0       	breq	.+56     	; 0x110c <ADC_u8SetREF+0x54>
			&& (Copy_u8REF != ADC_u8_VREF_RESERVED_BIT)) {
		//Clear Voltage Reference Selection Bits in ADMUX Register
		ADC_u8_ADMUX_REG &= ADC_u8_CLR_REFS;
    10d4:	a7 e2       	ldi	r26, 0x27	; 39
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e7 e2       	ldi	r30, 0x27	; 39
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8f 73       	andi	r24, 0x3F	; 63
    10e0:	8c 93       	st	X, r24

		//Set Reference selection bits
		ADC_u8_ADMUX_REG |= (Copy_u8REF << ADC_u8_REF_SHIFT);
    10e2:	a7 e2       	ldi	r26, 0x27	; 39
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e2       	ldi	r30, 0x27	; 39
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	28 2f       	mov	r18, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	00 24       	eor	r0, r0
    10f6:	96 95       	lsr	r25
    10f8:	87 95       	ror	r24
    10fa:	07 94       	ror	r0
    10fc:	96 95       	lsr	r25
    10fe:	87 95       	ror	r24
    1100:	07 94       	ror	r0
    1102:	98 2f       	mov	r25, r24
    1104:	80 2d       	mov	r24, r0
    1106:	82 2b       	or	r24, r18
    1108:	8c 93       	st	X, r24
    110a:	01 c0       	rjmp	.+2      	; 0x110e <ADC_u8SetREF+0x56>

	} else {
		Local_u8ErrorState = STD_TYPES_NOTOK;
    110c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    110e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <ADC_u8SetPrescaler>:

u8 ADC_u8SetPrescaler(u8 Copy_u8Prescaler) {
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <ADC_u8SetPrescaler+0x6>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Prescaler < ADC_u8_PS_NUM) {
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	88 30       	cpi	r24, 0x08	; 8
    112e:	80 f4       	brcc	.+32     	; 0x1150 <ADC_u8SetPrescaler+0x36>
		//Clear Prescaler Selection Bits in
		ADC_u8_ADCSRA_REG &= ADC_u8_CLR_PS_BITS;
    1130:	a6 e2       	ldi	r26, 0x26	; 38
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e6 e2       	ldi	r30, 0x26	; 38
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8c 7f       	andi	r24, 0xFC	; 252
    113c:	8c 93       	st	X, r24

		//Set Prescaler Selection Bits
		ADC_u8_ADCSRA_REG |= Copy_u8Prescaler;
    113e:	a6 e2       	ldi	r26, 0x26	; 38
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e6 e2       	ldi	r30, 0x26	; 38
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	90 81       	ld	r25, Z
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	89 2b       	or	r24, r25
    114c:	8c 93       	st	X, r24
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <ADC_u8SetPrescaler+0x38>

	} else {
		Local_u8ErrorState = STD_TYPES_NOTOK;
    1150:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <ADC_u8AutoTriggerSource>:

u8 ADC_u8AutoTriggerSource(u8 Copy_u8ATS) {
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <ADC_u8AutoTriggerSource+0x6>
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01

	if (!GET_BIT(Copy_u8ATS, ADC_u8_SFIOR_RESERVED_BIT)) {
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	82 95       	swap	r24
    1172:	8f 70       	andi	r24, 0x0F	; 15
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	81 70       	andi	r24, 0x01	; 1
    117a:	90 70       	andi	r25, 0x00	; 0
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	f1 f4       	brne	.+60     	; 0x11bc <ADC_u8AutoTriggerSource+0x5e>
		//Enable Auto Trigger Sources in ADCSRA
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADATE);
    1180:	a6 e2       	ldi	r26, 0x26	; 38
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e6 e2       	ldi	r30, 0x26	; 38
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 62       	ori	r24, 0x20	; 32
    118c:	8c 93       	st	X, r24

		//Clear Auto Trigger Source Selection Bits in SFIOR
		ADC_u8_SFIOR_REG &= ADC_u8_CLR_ADTS_BITS;
    118e:	a0 e5       	ldi	r26, 0x50	; 80
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e0 e5       	ldi	r30, 0x50	; 80
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8f 70       	andi	r24, 0x0F	; 15
    119a:	8c 93       	st	X, r24

		//Set  Auto  Trigger Source Selection Bits in SFIOR
		ADC_u8_SFIOR_REG |= Copy_u8ATS;
    119c:	a0 e5       	ldi	r26, 0x50	; 80
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e0 e5       	ldi	r30, 0x50	; 80
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	90 81       	ld	r25, Z
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	89 2b       	or	r24, r25
    11aa:	8c 93       	st	X, r24

		//Start Conversion
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADSC);
    11ac:	a6 e2       	ldi	r26, 0x26	; 38
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e6 e2       	ldi	r30, 0x26	; 38
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	80 64       	ori	r24, 0x40	; 64
    11b8:	8c 93       	st	X, r24
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <ADC_u8AutoTriggerSource+0x60>

	} else {
		Local_u8ErrorState = STD_TYPES_NOTOK;
    11bc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <ADC_voidAutoTriggerDisable>:

/*This function has no arguments as it just Disable the 
 Auto Trigger Sources by clearing the ADATE bit in ADCSRA register*/
void ADC_voidAutoTriggerDisable(void) {
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
	//Enable Auto Trigger Sources in ADCSRA
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_u8_CSRA_ADATE);
    11d2:	a6 e2       	ldi	r26, 0x26	; 38
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e6 e2       	ldi	r30, 0x26	; 38
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	8f 7d       	andi	r24, 0xDF	; 223
    11de:	8c 93       	st	X, r24
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <ADC_u8ResultAdjustment>:

/*This function takes 0 or 1 to adjust the result.
 Where for left adjust result put            "ADC_u8_RIGHT_ADJUST_RES",
 Alternativily, for right adjust result put  "ADC_u8_LIFT_ADJUST_RES".
 Otherwise the function will return error state.*/
u8 ADC_u8ResultAdjustment(u8 Copy_u8ADLAR) {
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <ADC_u8ResultAdjustment+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <ADC_u8ResultAdjustment+0x8>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8ADLAR) {
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	3c 83       	std	Y+4, r19	; 0x04
    1200:	2b 83       	std	Y+3, r18	; 0x03
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	69 f0       	breq	.+26     	; 0x1224 <ADC_u8ResultAdjustment+0x3e>
    120a:	2b 81       	ldd	r18, Y+3	; 0x03
    120c:	3c 81       	ldd	r19, Y+4	; 0x04
    120e:	21 30       	cpi	r18, 0x01	; 1
    1210:	31 05       	cpc	r19, r1
    1212:	81 f4       	brne	.+32     	; 0x1234 <ADC_u8ResultAdjustment+0x4e>
	case ADC_u8_LIFT_ADJUST_RES:
		SET_BIT(ADC_u8_ADMUX_REG, ADC_u8_MUXREG_LAR);
    1214:	a7 e2       	ldi	r26, 0x27	; 39
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e7 e2       	ldi	r30, 0x27	; 39
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	80 62       	ori	r24, 0x20	; 32
    1220:	8c 93       	st	X, r24
    1222:	09 c0       	rjmp	.+18     	; 0x1236 <ADC_u8ResultAdjustment+0x50>
		break;
	case ADC_u8_RIGHT_ADJUST_RES:
		CLR_BIT(ADC_u8_ADMUX_REG, ADC_u8_MUXREG_LAR);
    1224:	a7 e2       	ldi	r26, 0x27	; 39
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e7 e2       	ldi	r30, 0x27	; 39
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8f 7d       	andi	r24, 0xDF	; 223
    1230:	8c 93       	st	X, r24
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <ADC_u8ResultAdjustment+0x50>
		break;
	default:
		Local_u8ErrorState = STD_TYPES_NOTOK;
    1234:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	return Local_u8ErrorState;
    1236:	89 81       	ldd	r24, Y+1	; 0x01
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <main>:

/*
 * @main function
 */

int main(void){
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	e1 97       	sbiw	r28, 0x31	; 49
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61

	/*
	 * @Local_Variables
	 */
	u8  Local_u8Index=0;
    1262:	1d a2       	std	Y+37, r1	; 0x25
	u16 Local_u16DigitalValue=0;
    1264:	1f a2       	std	Y+39, r1	; 0x27
    1266:	1e a2       	std	Y+38, r1	; 0x26
	f32 Local_f32ResX=0.0;
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a0 e0       	ldi	r26, 0x00	; 0
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	89 a3       	std	Y+33, r24	; 0x21
    1272:	9a a3       	std	Y+34, r25	; 0x22
    1274:	ab a3       	std	Y+35, r26	; 0x23
    1276:	bc a3       	std	Y+36, r27	; 0x24
	f32 Local_f32VoltX_mv=0;
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a0 e0       	ldi	r26, 0x00	; 0
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	8d 8f       	std	Y+29, r24	; 0x1d
    1282:	9e 8f       	std	Y+30, r25	; 0x1e
    1284:	af 8f       	std	Y+31, r26	; 0x1f
    1286:	b8 a3       	std	Y+32, r27	; 0x20
	 */

	/*
	 * @Initialization Functions of Peripherals
	 */
	DIO_voidInit();
    1288:	0e 94 1b 0b 	call	0x1636	; 0x1636 <DIO_voidInit>
	LCD_voidInit();
    128c:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_voidInit>
	ADC_voidInit();
    1290:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
	/*
	 * End of Initializations
	 */
	u8 Local_u8String[]="RES=";
    1294:	ce 01       	movw	r24, r28
    1296:	88 96       	adiw	r24, 0x28	; 40
    1298:	9e a7       	std	Y+46, r25	; 0x2e
    129a:	8d a7       	std	Y+45, r24	; 0x2d
    129c:	e4 e6       	ldi	r30, 0x64	; 100
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	f8 ab       	std	Y+48, r31	; 0x30
    12a2:	ef a7       	std	Y+47, r30	; 0x2f
    12a4:	f5 e0       	ldi	r31, 0x05	; 5
    12a6:	f9 ab       	std	Y+49, r31	; 0x31
    12a8:	ef a5       	ldd	r30, Y+47	; 0x2f
    12aa:	f8 a9       	ldd	r31, Y+48	; 0x30
    12ac:	00 80       	ld	r0, Z
    12ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b0:	98 a9       	ldd	r25, Y+48	; 0x30
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	98 ab       	std	Y+48, r25	; 0x30
    12b6:	8f a7       	std	Y+47, r24	; 0x2f
    12b8:	ed a5       	ldd	r30, Y+45	; 0x2d
    12ba:	fe a5       	ldd	r31, Y+46	; 0x2e
    12bc:	00 82       	st	Z, r0
    12be:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	9e a7       	std	Y+46, r25	; 0x2e
    12c6:	8d a7       	std	Y+45, r24	; 0x2d
    12c8:	99 a9       	ldd	r25, Y+49	; 0x31
    12ca:	91 50       	subi	r25, 0x01	; 1
    12cc:	99 ab       	std	Y+49, r25	; 0x31
    12ce:	e9 a9       	ldd	r30, Y+49	; 0x31
    12d0:	ee 23       	and	r30, r30
    12d2:	51 f7       	brne	.-44     	; 0x12a8 <main+0x62>
	LCD_voidWriteString(Local_u8String);
    12d4:	ce 01       	movw	r24, r28
    12d6:	88 96       	adiw	r24, 0x28	; 40
    12d8:	0e 94 42 19 	call	0x3284	; 0x3284 <LCD_voidWriteString>
	 * @Super_Loop
	 */
	while(1){

		/*Swapping between the 7 Channels and Take Readings*/
		for (Local_u8Index=0;Local_u8Index<7;Local_u8Index++){
    12dc:	1d a2       	std	Y+37, r1	; 0x25
    12de:	ae c0       	rjmp	.+348    	; 0x143c <main+0x1f6>
			DIO_u8SetPortValue(DIO_u8_PORTC,AROM_Au8Channels[Local_u8Index]); //Setting High one channel and the other to Low
    12e0:	8d a1       	ldd	r24, Y+37	; 0x25
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	fc 01       	movw	r30, r24
    12e8:	e1 58       	subi	r30, 0x81	; 129
    12ea:	fe 4f       	sbci	r31, 0xFE	; 254
    12ec:	90 81       	ld	r25, Z
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	69 2f       	mov	r22, r25
    12f2:	0e 94 32 10 	call	0x2064	; 0x2064 <DIO_u8SetPortValue>
			if(ADC_u8GetDigitalValueSync(ADC_u8_SINGLE_ADC6, &Local_u16DigitalValue)){
    12f6:	9e 01       	movw	r18, r28
    12f8:	2a 5d       	subi	r18, 0xDA	; 218
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	86 e0       	ldi	r24, 0x06	; 6
    12fe:	b9 01       	movw	r22, r18
    1300:	0e 94 3b 07 	call	0xe76	; 0xe76 <ADC_u8GetDigitalValueSync>
    1304:	88 23       	and	r24, r24
    1306:	09 f4       	brne	.+2      	; 0x130a <main+0xc4>
    1308:	8c c0       	rjmp	.+280    	; 0x1422 <main+0x1dc>
				/*
				 * Taking the reading and assign it to the Pointer of Array element
				 */
				AROM_u16DigitalReadings[Local_u8Index]=Local_u16DigitalValue;
    130a:	8d a1       	ldd	r24, Y+37	; 0x25
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	2e a1       	ldd	r18, Y+38	; 0x26
    1312:	3f a1       	ldd	r19, Y+39	; 0x27
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	fc 01       	movw	r30, r24
    131a:	e7 57       	subi	r30, 0x77	; 119
    131c:	fe 4f       	sbci	r31, 0xFE	; 254
    131e:	31 83       	std	Z+1, r19	; 0x01
    1320:	20 83       	st	Z, r18
				LCD_voidGoToXY(0,LCD_u8_LINE_2);				//debug
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_voidGoToXY>
				LCD_voidWritNumber(Local_u16DigitalValue);      //debug
    132a:	8e a1       	ldd	r24, Y+38	; 0x26
    132c:	9f a1       	ldd	r25, Y+39	; 0x27
    132e:	cc 01       	movw	r24, r24
    1330:	a0 e0       	ldi	r26, 0x00	; 0
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_voidWritNumber>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	aa ef       	ldi	r26, 0xFA	; 250
    1342:	b3 e4       	ldi	r27, 0x43	; 67
    1344:	89 8f       	std	Y+25, r24	; 0x19
    1346:	9a 8f       	std	Y+26, r25	; 0x1a
    1348:	ab 8f       	std	Y+27, r26	; 0x1b
    134a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134c:	69 8d       	ldd	r22, Y+25	; 0x19
    134e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1350:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1352:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	4a e7       	ldi	r20, 0x7A	; 122
    135a:	53 e4       	ldi	r21, 0x43	; 67
    135c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	8d 8b       	std	Y+21, r24	; 0x15
    1366:	9e 8b       	std	Y+22, r25	; 0x16
    1368:	af 8b       	std	Y+23, r26	; 0x17
    136a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    136c:	6d 89       	ldd	r22, Y+21	; 0x15
    136e:	7e 89       	ldd	r23, Y+22	; 0x16
    1370:	8f 89       	ldd	r24, Y+23	; 0x17
    1372:	98 8d       	ldd	r25, Y+24	; 0x18
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e8       	ldi	r20, 0x80	; 128
    137a:	5f e3       	ldi	r21, 0x3F	; 63
    137c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1380:	88 23       	and	r24, r24
    1382:	2c f4       	brge	.+10     	; 0x138e <main+0x148>
		__ticks = 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9c 8b       	std	Y+20, r25	; 0x14
    138a:	8b 8b       	std	Y+19, r24	; 0x13
    138c:	3f c0       	rjmp	.+126    	; 0x140c <main+0x1c6>
	else if (__tmp > 65535)
    138e:	6d 89       	ldd	r22, Y+21	; 0x15
    1390:	7e 89       	ldd	r23, Y+22	; 0x16
    1392:	8f 89       	ldd	r24, Y+23	; 0x17
    1394:	98 8d       	ldd	r25, Y+24	; 0x18
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	3f ef       	ldi	r19, 0xFF	; 255
    139a:	4f e7       	ldi	r20, 0x7F	; 127
    139c:	57 e4       	ldi	r21, 0x47	; 71
    139e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13a2:	18 16       	cp	r1, r24
    13a4:	4c f5       	brge	.+82     	; 0x13f8 <main+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a6:	69 8d       	ldd	r22, Y+25	; 0x19
    13a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e2       	ldi	r20, 0x20	; 32
    13b4:	51 e4       	ldi	r21, 0x41	; 65
    13b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	9c 8b       	std	Y+20, r25	; 0x14
    13cc:	8b 8b       	std	Y+19, r24	; 0x13
    13ce:	0f c0       	rjmp	.+30     	; 0x13ee <main+0x1a8>
    13d0:	89 e1       	ldi	r24, 0x19	; 25
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9a 8b       	std	Y+18, r25	; 0x12
    13d6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13d8:	89 89       	ldd	r24, Y+17	; 0x11
    13da:	9a 89       	ldd	r25, Y+18	; 0x12
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <main+0x196>
    13e0:	9a 8b       	std	Y+18, r25	; 0x12
    13e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e4:	8b 89       	ldd	r24, Y+19	; 0x13
    13e6:	9c 89       	ldd	r25, Y+20	; 0x14
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	9c 8b       	std	Y+20, r25	; 0x14
    13ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ee:	8b 89       	ldd	r24, Y+19	; 0x13
    13f0:	9c 89       	ldd	r25, Y+20	; 0x14
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	69 f7       	brne	.-38     	; 0x13d0 <main+0x18a>
    13f6:	1f c0       	rjmp	.+62     	; 0x1436 <main+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f8:	6d 89       	ldd	r22, Y+21	; 0x15
    13fa:	7e 89       	ldd	r23, Y+22	; 0x16
    13fc:	8f 89       	ldd	r24, Y+23	; 0x17
    13fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9c 8b       	std	Y+20, r25	; 0x14
    140a:	8b 8b       	std	Y+19, r24	; 0x13
    140c:	8b 89       	ldd	r24, Y+19	; 0x13
    140e:	9c 89       	ldd	r25, Y+20	; 0x14
    1410:	98 8b       	std	Y+16, r25	; 0x10
    1412:	8f 87       	std	Y+15, r24	; 0x0f
    1414:	8f 85       	ldd	r24, Y+15	; 0x0f
    1416:	98 89       	ldd	r25, Y+16	; 0x10
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <main+0x1d2>
    141c:	98 8b       	std	Y+16, r25	; 0x10
    141e:	8f 87       	std	Y+15, r24	; 0x0f
    1420:	0a c0       	rjmp	.+20     	; 0x1436 <main+0x1f0>
			}else{
				/*
				 * if the ADC_u8GetDigitalValueSync Function return Error
				 * in this case it assign 0 to the corresponding Digital Reading in the array
				 */
				AROM_u16DigitalReadings[Local_u8Index]=0;
    1422:	8d a1       	ldd	r24, Y+37	; 0x25
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	fc 01       	movw	r30, r24
    142e:	e7 57       	subi	r30, 0x77	; 119
    1430:	fe 4f       	sbci	r31, 0xFE	; 254
    1432:	11 82       	std	Z+1, r1	; 0x01
    1434:	10 82       	st	Z, r1
	 * @Super_Loop
	 */
	while(1){

		/*Swapping between the 7 Channels and Take Readings*/
		for (Local_u8Index=0;Local_u8Index<7;Local_u8Index++){
    1436:	8d a1       	ldd	r24, Y+37	; 0x25
    1438:	8f 5f       	subi	r24, 0xFF	; 255
    143a:	8d a3       	std	Y+37, r24	; 0x25
    143c:	8d a1       	ldd	r24, Y+37	; 0x25
    143e:	87 30       	cpi	r24, 0x07	; 7
    1440:	08 f4       	brcc	.+2      	; 0x1444 <main+0x1fe>
    1442:	4e cf       	rjmp	.-356    	; 0x12e0 <main+0x9a>
			}
		}
		/*End of for loop*/

		/*Swapping for checking for valid ranges and Calculate the equivalent Resistance*/
		for(Local_u8Index=6;Local_u8Index>=0;Local_u8Index--){
    1444:	86 e0       	ldi	r24, 0x06	; 6
    1446:	8d a3       	std	Y+37, r24	; 0x25
			 * (corresponding to large resistors) is nearly equals to (1/2) of ADC Range (1024)
			 * it means that the unknown resistance is approximately equals to this resistor
			 * and it belongs to its range. So there is no need to check the other readings as
			 * they will be very large and inaccurate.
			 */
			if(AROM_u16DigitalReadings[Local_u8Index]>=440){
    1448:	8d a1       	ldd	r24, Y+37	; 0x25
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	fc 01       	movw	r30, r24
    1454:	e7 57       	subi	r30, 0x77	; 119
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	f1 e0       	ldi	r31, 0x01	; 1
    145e:	88 3b       	cpi	r24, 0xB8	; 184
    1460:	9f 07       	cpc	r25, r31
    1462:	08 f4       	brcc	.+2      	; 0x1466 <main+0x220>
    1464:	e4 c0       	rjmp	.+456    	; 0x162e <main+0x3e8>
				Local_f32VoltX_mv=(f32)(Local_u16DigitalValue*(5000UL))/1024.0;
    1466:	8e a1       	ldd	r24, Y+38	; 0x26
    1468:	9f a1       	ldd	r25, Y+39	; 0x27
    146a:	cc 01       	movw	r24, r24
    146c:	a0 e0       	ldi	r26, 0x00	; 0
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	28 e8       	ldi	r18, 0x88	; 136
    1472:	33 e1       	ldi	r19, 0x13	; 19
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	0e 94 96 1a 	call	0x352c	; 0x352c <__mulsi3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	bc 01       	movw	r22, r24
    1486:	cd 01       	movw	r24, r26
    1488:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	54 e4       	ldi	r21, 0x44	; 68
    149c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8d 8f       	std	Y+29, r24	; 0x1d
    14a6:	9e 8f       	std	Y+30, r25	; 0x1e
    14a8:	af 8f       	std	Y+31, r26	; 0x1f
    14aa:	b8 a3       	std	Y+32, r27	; 0x20
				Local_f32ResX=Local_f32VoltX_mv*AROM_Au16Resistances[Local_u8Index]/(4300UL-Local_f32VoltX_mv);
    14ac:	8d a1       	ldd	r24, Y+37	; 0x25
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	fc 01       	movw	r30, r24
    14b8:	ef 58       	subi	r30, 0x8F	; 143
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	80 81       	ld	r24, Z
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	cc 01       	movw	r24, r24
    14c2:	a0 e0       	ldi	r26, 0x00	; 0
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    14d8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    14da:	4f 8d       	ldd	r20, Y+31	; 0x1f
    14dc:	58 a1       	ldd	r21, Y+32	; 0x20
    14de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	7c 01       	movw	r14, r24
    14e8:	8d 01       	movw	r16, r26
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	70 e6       	ldi	r23, 0x60	; 96
    14ee:	86 e8       	ldi	r24, 0x86	; 134
    14f0:	95 e4       	ldi	r25, 0x45	; 69
    14f2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    14f4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    14f6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    14f8:	58 a1       	ldd	r21, Y+32	; 0x20
    14fa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	9c 01       	movw	r18, r24
    1504:	ad 01       	movw	r20, r26
    1506:	c8 01       	movw	r24, r16
    1508:	b7 01       	movw	r22, r14
    150a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	89 a3       	std	Y+33, r24	; 0x21
    1514:	9a a3       	std	Y+34, r25	; 0x22
    1516:	ab a3       	std	Y+35, r26	; 0x23
    1518:	bc a3       	std	Y+36, r27	; 0x24
				LCD_voidGoToXY(4,LCD_u8_LINE_1);
    151a:	84 e0       	ldi	r24, 0x04	; 4
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_voidGoToXY>
				LCD_voidWritNumber((u32)Local_f32ResX);
    1522:	69 a1       	ldd	r22, Y+33	; 0x21
    1524:	7a a1       	ldd	r23, Y+34	; 0x22
    1526:	8b a1       	ldd	r24, Y+35	; 0x23
    1528:	9c a1       	ldd	r25, Y+36	; 0x24
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_voidWritNumber>
				LCD_voidWriteChar(0xF4);
    153a:	84 ef       	ldi	r24, 0xF4	; 244
    153c:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LCD_voidWriteChar>
				LCD_voidWriteString("   ");
    1540:	80 e6       	ldi	r24, 0x60	; 96
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 42 19 	call	0x3284	; 0x3284 <LCD_voidWriteString>
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	aa e7       	ldi	r26, 0x7A	; 122
    154e:	b4 e4       	ldi	r27, 0x44	; 68
    1550:	8b 87       	std	Y+11, r24	; 0x0b
    1552:	9c 87       	std	Y+12, r25	; 0x0c
    1554:	ad 87       	std	Y+13, r26	; 0x0d
    1556:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1558:	6b 85       	ldd	r22, Y+11	; 0x0b
    155a:	7c 85       	ldd	r23, Y+12	; 0x0c
    155c:	8d 85       	ldd	r24, Y+13	; 0x0d
    155e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4a e7       	ldi	r20, 0x7A	; 122
    1566:	53 e4       	ldi	r21, 0x43	; 67
    1568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	8f 83       	std	Y+7, r24	; 0x07
    1572:	98 87       	std	Y+8, r25	; 0x08
    1574:	a9 87       	std	Y+9, r26	; 0x09
    1576:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1578:	6f 81       	ldd	r22, Y+7	; 0x07
    157a:	78 85       	ldd	r23, Y+8	; 0x08
    157c:	89 85       	ldd	r24, Y+9	; 0x09
    157e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    158c:	88 23       	and	r24, r24
    158e:	2c f4       	brge	.+10     	; 0x159a <main+0x354>
		__ticks = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <main+0x3d2>
	else if (__tmp > 65535)
    159a:	6f 81       	ldd	r22, Y+7	; 0x07
    159c:	78 85       	ldd	r23, Y+8	; 0x08
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	4c f5       	brge	.+82     	; 0x1604 <main+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
    15da:	0f c0       	rjmp	.+30     	; 0x15fa <main+0x3b4>
    15dc:	89 e1       	ldi	r24, 0x19	; 25
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9c 83       	std	Y+4, r25	; 0x04
    15e2:	8b 83       	std	Y+3, r24	; 0x03
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <main+0x3a2>
    15ec:	9c 83       	std	Y+4, r25	; 0x04
    15ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	9e 83       	std	Y+6, r25	; 0x06
    15f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	69 f7       	brne	.-38     	; 0x15dc <main+0x396>
    1602:	6c ce       	rjmp	.-808    	; 0x12dc <main+0x96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1604:	6f 81       	ldd	r22, Y+7	; 0x07
    1606:	78 85       	ldd	r23, Y+8	; 0x08
    1608:	89 85       	ldd	r24, Y+9	; 0x09
    160a:	9a 85       	ldd	r25, Y+10	; 0x0a
    160c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <main+0x3de>
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	57 ce       	rjmp	.-850    	; 0x12dc <main+0x96>
			}
		}
		/*End of for loop*/

		/*Swapping for checking for valid ranges and Calculate the equivalent Resistance*/
		for(Local_u8Index=6;Local_u8Index>=0;Local_u8Index--){
    162e:	8d a1       	ldd	r24, Y+37	; 0x25
    1630:	81 50       	subi	r24, 0x01	; 1
    1632:	8d a3       	std	Y+37, r24	; 0x25
    1634:	09 cf       	rjmp	.-494    	; 0x1448 <main+0x202>

00001636 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
	/* Init of Pins Direction */
	DIO_u8_DDRA_REG = PRIVATE_u8_CONC(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
    163e:	ea e3       	ldi	r30, 0x3A	; 58
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	10 82       	st	Z, r1
			                          DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);

	DIO_u8_DDRB_REG = PRIVATE_u8_CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION,
    1644:	e7 e3       	ldi	r30, 0x37	; 55
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	10 82       	st	Z, r1
			                          DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);

	DIO_u8_DDRC_REG = PRIVATE_u8_CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION,
    164a:	e4 e3       	ldi	r30, 0x34	; 52
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	8f ef       	ldi	r24, 0xFF	; 255
    1650:	80 83       	st	Z, r24
			                          DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);

	DIO_u8_DDRD_REG = PRIVATE_u8_CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION,
    1652:	e1 e3       	ldi	r30, 0x31	; 49
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	80 83       	st	Z, r24
			                          DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);

	/* Init of Pins Values */
	DIO_u8_PORTA_REG = PRIVATE_u8_CONC(DIO_u8_PA7_VALUE,DIO_u8_PA6_VALUE,DIO_u8_PA5_VALUE,DIO_u8_PA4_VALUE,
    165a:	eb e3       	ldi	r30, 0x3B	; 59
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	10 82       	st	Z, r1
			                           DIO_u8_PA3_VALUE,DIO_u8_PA2_VALUE,DIO_u8_PA1_VALUE,DIO_u8_PA0_VALUE);

	DIO_u8_PORTB_REG = PRIVATE_u8_CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE,
    1660:	e8 e3       	ldi	r30, 0x38	; 56
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	10 82       	st	Z, r1
			                           DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);

	DIO_u8_PORTC_REG = PRIVATE_u8_CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE,
    1666:	e5 e3       	ldi	r30, 0x35	; 53
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	10 82       	st	Z, r1
			                           DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);

	DIO_u8_PORTD_REG = PRIVATE_u8_CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE,
    166c:	e2 e3       	ldi	r30, 0x32	; 50
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	10 82       	st	Z, r1
			                           DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);
}
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,
		u8 Copy_u8PinDirection) {
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	2e 97       	sbiw	r28, 0x0e	; 14
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	8a 83       	std	Y+2, r24	; 0x02
    168e:	6b 83       	std	Y+3, r22	; 0x03
    1690:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)) {
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	84 30       	cpi	r24, 0x04	; 4
    169a:	08 f0       	brcs	.+2      	; 0x169e <DIO_u8SetPinDirection+0x26>
    169c:	be c1       	rjmp	.+892    	; 0x1a1a <DIO_u8SetPinDirection+0x3a2>
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	88 30       	cpi	r24, 0x08	; 8
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <DIO_u8SetPinDirection+0x2e>
    16a4:	ba c1       	rjmp	.+884    	; 0x1a1a <DIO_u8SetPinDirection+0x3a2>
		switch (Copy_u8PortId) {
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3e 87       	std	Y+14, r19	; 0x0e
    16ae:	2d 87       	std	Y+13, r18	; 0x0d
    16b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	91 05       	cpc	r25, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <DIO_u8SetPinDirection+0x44>
    16ba:	7d c0       	rjmp	.+250    	; 0x17b6 <DIO_u8SetPinDirection+0x13e>
    16bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    16be:	3e 85       	ldd	r19, Y+14	; 0x0e
    16c0:	22 30       	cpi	r18, 0x02	; 2
    16c2:	31 05       	cpc	r19, r1
    16c4:	2c f4       	brge	.+10     	; 0x16d0 <DIO_u8SetPinDirection+0x58>
    16c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	71 f0       	breq	.+28     	; 0x16ea <DIO_u8SetPinDirection+0x72>
    16ce:	a6 c1       	rjmp	.+844    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
    16d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    16d2:	3e 85       	ldd	r19, Y+14	; 0x0e
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	09 f4       	brne	.+2      	; 0x16dc <DIO_u8SetPinDirection+0x64>
    16da:	d3 c0       	rjmp	.+422    	; 0x1882 <DIO_u8SetPinDirection+0x20a>
    16dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16de:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e0:	83 30       	cpi	r24, 0x03	; 3
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <DIO_u8SetPinDirection+0x70>
    16e6:	33 c1       	rjmp	.+614    	; 0x194e <DIO_u8SetPinDirection+0x2d6>
    16e8:	99 c1       	rjmp	.+818    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection) {
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	3c 87       	std	Y+12, r19	; 0x0c
    16f2:	2b 87       	std	Y+11, r18	; 0x0b
    16f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    16f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	91 05       	cpc	r25, r1
    16fc:	51 f0       	breq	.+20     	; 0x1712 <DIO_u8SetPinDirection+0x9a>
    16fe:	2b 85       	ldd	r18, Y+11	; 0x0b
    1700:	3c 85       	ldd	r19, Y+12	; 0x0c
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	31 05       	cpc	r19, r1
    1706:	71 f1       	breq	.+92     	; 0x1764 <DIO_u8SetPinDirection+0xec>
    1708:	8b 85       	ldd	r24, Y+11	; 0x0b
    170a:	9c 85       	ldd	r25, Y+12	; 0x0c
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	a9 f0       	breq	.+42     	; 0x173a <DIO_u8SetPinDirection+0xc2>
    1710:	50 c0       	rjmp	.+160    	; 0x17b2 <DIO_u8SetPinDirection+0x13a>
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1712:	aa e3       	ldi	r26, 0x3A	; 58
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	ea e3       	ldi	r30, 0x3A	; 58
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_u8SetPinDirection+0xb8>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_u8SetPinDirection+0xb4>
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	71 c1       	rjmp	.+738    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    173a:	aa e3       	ldi	r26, 0x3A	; 58
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	ea e3       	ldi	r30, 0x3A	; 58
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <DIO_u8SetPinDirection+0xe0>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <DIO_u8SetPinDirection+0xdc>
    175c:	80 95       	com	r24
    175e:	84 23       	and	r24, r20
    1760:	8c 93       	st	X, r24
    1762:	5c c1       	rjmp	.+696    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			case DIO_u8_INPUT_UP:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1764:	aa e3       	ldi	r26, 0x3A	; 58
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	ea e3       	ldi	r30, 0x3A	; 58
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_u8SetPinDirection+0x108>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	2a 95       	dec	r18
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_u8SetPinDirection+0x104>
    1784:	80 95       	com	r24
    1786:	84 23       	and	r24, r20
    1788:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    178a:	ab e3       	ldi	r26, 0x3B	; 59
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	eb e3       	ldi	r30, 0x3B	; 59
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_u8SetPinDirection+0x130>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_u8SetPinDirection+0x12c>
    17ac:	84 2b       	or	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	35 c1       	rjmp	.+618    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOTOK;
    17b2:	19 82       	std	Y+1, r1	; 0x01
    17b4:	33 c1       	rjmp	.+614    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection) {
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3a 87       	std	Y+10, r19	; 0x0a
    17be:	29 87       	std	Y+9, r18	; 0x09
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	51 f0       	breq	.+20     	; 0x17de <DIO_u8SetPinDirection+0x166>
    17ca:	29 85       	ldd	r18, Y+9	; 0x09
    17cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	71 f1       	breq	.+92     	; 0x1830 <DIO_u8SetPinDirection+0x1b8>
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	a9 f0       	breq	.+42     	; 0x1806 <DIO_u8SetPinDirection+0x18e>
    17dc:	50 c0       	rjmp	.+160    	; 0x187e <DIO_u8SetPinDirection+0x206>
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    17de:	a7 e3       	ldi	r26, 0x37	; 55
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e7 e3       	ldi	r30, 0x37	; 55
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_u8SetPinDirection+0x184>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <DIO_u8SetPinDirection+0x180>
    1800:	84 2b       	or	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	0b c1       	rjmp	.+534    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1806:	a7 e3       	ldi	r26, 0x37	; 55
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e7 e3       	ldi	r30, 0x37	; 55
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <DIO_u8SetPinDirection+0x1ac>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <DIO_u8SetPinDirection+0x1a8>
    1828:	80 95       	com	r24
    182a:	84 23       	and	r24, r20
    182c:	8c 93       	st	X, r24
    182e:	f6 c0       	rjmp	.+492    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			case DIO_u8_INPUT_UP:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1830:	a7 e3       	ldi	r26, 0x37	; 55
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e7 e3       	ldi	r30, 0x37	; 55
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 c0       	rjmp	.+4      	; 0x184c <DIO_u8SetPinDirection+0x1d4>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	2a 95       	dec	r18
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <DIO_u8SetPinDirection+0x1d0>
    1850:	80 95       	com	r24
    1852:	84 23       	and	r24, r20
    1854:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1856:	a8 e3       	ldi	r26, 0x38	; 56
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e8 e3       	ldi	r30, 0x38	; 56
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <DIO_u8SetPinDirection+0x1fc>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <DIO_u8SetPinDirection+0x1f8>
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	cf c0       	rjmp	.+414    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOTOK;
    187e:	19 82       	std	Y+1, r1	; 0x01
    1880:	cd c0       	rjmp	.+410    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
			}
			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection) {
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	38 87       	std	Y+8, r19	; 0x08
    188a:	2f 83       	std	Y+7, r18	; 0x07
    188c:	8f 81       	ldd	r24, Y+7	; 0x07
    188e:	98 85       	ldd	r25, Y+8	; 0x08
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	91 05       	cpc	r25, r1
    1894:	51 f0       	breq	.+20     	; 0x18aa <DIO_u8SetPinDirection+0x232>
    1896:	2f 81       	ldd	r18, Y+7	; 0x07
    1898:	38 85       	ldd	r19, Y+8	; 0x08
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	71 f1       	breq	.+92     	; 0x18fc <DIO_u8SetPinDirection+0x284>
    18a0:	8f 81       	ldd	r24, Y+7	; 0x07
    18a2:	98 85       	ldd	r25, Y+8	; 0x08
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	a9 f0       	breq	.+42     	; 0x18d2 <DIO_u8SetPinDirection+0x25a>
    18a8:	50 c0       	rjmp	.+160    	; 0x194a <DIO_u8SetPinDirection+0x2d2>
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    18aa:	a4 e3       	ldi	r26, 0x34	; 52
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e4 e3       	ldi	r30, 0x34	; 52
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_u8SetPinDirection+0x250>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <DIO_u8SetPinDirection+0x24c>
    18cc:	84 2b       	or	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	a5 c0       	rjmp	.+330    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    18d2:	a4 e3       	ldi	r26, 0x34	; 52
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e4 e3       	ldi	r30, 0x34	; 52
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_u8SetPinDirection+0x278>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_u8SetPinDirection+0x274>
    18f4:	80 95       	com	r24
    18f6:	84 23       	and	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	90 c0       	rjmp	.+288    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			case DIO_u8_INPUT_UP:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    18fc:	a4 e3       	ldi	r26, 0x34	; 52
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e4 e3       	ldi	r30, 0x34	; 52
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_u8SetPinDirection+0x2a0>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	2a 95       	dec	r18
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_u8SetPinDirection+0x29c>
    191c:	80 95       	com	r24
    191e:	84 23       	and	r24, r20
    1920:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1922:	a5 e3       	ldi	r26, 0x35	; 53
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e5 e3       	ldi	r30, 0x35	; 53
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <DIO_u8SetPinDirection+0x2c8>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <DIO_u8SetPinDirection+0x2c4>
    1944:	84 2b       	or	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	69 c0       	rjmp	.+210    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOTOK;
    194a:	19 82       	std	Y+1, r1	; 0x01
    194c:	67 c0       	rjmp	.+206    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
			}
			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection) {
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	3e 83       	std	Y+6, r19	; 0x06
    1956:	2d 83       	std	Y+5, r18	; 0x05
    1958:	8d 81       	ldd	r24, Y+5	; 0x05
    195a:	9e 81       	ldd	r25, Y+6	; 0x06
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	91 05       	cpc	r25, r1
    1960:	51 f0       	breq	.+20     	; 0x1976 <DIO_u8SetPinDirection+0x2fe>
    1962:	2d 81       	ldd	r18, Y+5	; 0x05
    1964:	3e 81       	ldd	r19, Y+6	; 0x06
    1966:	22 30       	cpi	r18, 0x02	; 2
    1968:	31 05       	cpc	r19, r1
    196a:	71 f1       	breq	.+92     	; 0x19c8 <DIO_u8SetPinDirection+0x350>
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	9e 81       	ldd	r25, Y+6	; 0x06
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	a9 f0       	breq	.+42     	; 0x199e <DIO_u8SetPinDirection+0x326>
    1974:	50 c0       	rjmp	.+160    	; 0x1a16 <DIO_u8SetPinDirection+0x39e>
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1976:	a1 e3       	ldi	r26, 0x31	; 49
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e1 e3       	ldi	r30, 0x31	; 49
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_u8SetPinDirection+0x31c>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_u8SetPinDirection+0x318>
    1998:	84 2b       	or	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	3f c0       	rjmp	.+126    	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    199e:	a1 e3       	ldi	r26, 0x31	; 49
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e1 e3       	ldi	r30, 0x31	; 49
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <DIO_u8SetPinDirection+0x344>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <DIO_u8SetPinDirection+0x340>
    19c0:	80 95       	com	r24
    19c2:	84 23       	and	r24, r20
    19c4:	8c 93       	st	X, r24
    19c6:	2a c0       	rjmp	.+84     	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			case DIO_u8_INPUT_UP:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    19c8:	a1 e3       	ldi	r26, 0x31	; 49
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e1 e3       	ldi	r30, 0x31	; 49
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <DIO_u8SetPinDirection+0x36c>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	2a 95       	dec	r18
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <DIO_u8SetPinDirection+0x368>
    19e8:	80 95       	com	r24
    19ea:	84 23       	and	r24, r20
    19ec:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    19ee:	a2 e3       	ldi	r26, 0x32	; 50
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e2 e3       	ldi	r30, 0x32	; 50
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <DIO_u8SetPinDirection+0x394>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <DIO_u8SetPinDirection+0x390>
    1a10:	84 2b       	or	r24, r20
    1a12:	8c 93       	st	X, r24
    1a14:	03 c0       	rjmp	.+6      	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOTOK;
    1a16:	19 82       	std	Y+1, r1	; 0x01
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <DIO_u8SetPinDirection+0x3a4>
			}
			break;
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOTOK;
    1a1a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1e:	2e 96       	adiw	r28, 0x0e	; 14
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue) {
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	2e 97       	sbiw	r28, 0x0e	; 14
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	8a 83       	std	Y+2, r24	; 0x02
    1a46:	6b 83       	std	Y+3, r22	; 0x03
    1a48:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinId <= DIO_u8_PIN7)
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	88 30       	cpi	r24, 0x08	; 8
    1a52:	08 f0       	brcs	.+2      	; 0x1a56 <DIO_u8SetPinValue+0x26>
    1a54:	0a c1       	rjmp	.+532    	; 0x1c6a <DIO_u8SetPinValue+0x23a>
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	88 23       	and	r24, r24
    1a5a:	21 f0       	breq	.+8      	; 0x1a64 <DIO_u8SetPinValue+0x34>
    1a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <DIO_u8SetPinValue+0x34>
    1a62:	03 c1       	rjmp	.+518    	; 0x1c6a <DIO_u8SetPinValue+0x23a>
			&& ((Copy_u8PinValue == DIO_u8_LOW)
					|| (Copy_u8PinValue == DIO_u8_HIGH))) {
		switch (Copy_u8PortId) {
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	3e 87       	std	Y+14, r19	; 0x0e
    1a6c:	2d 87       	std	Y+13, r18	; 0x0d
    1a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a72:	81 30       	cpi	r24, 0x01	; 1
    1a74:	91 05       	cpc	r25, r1
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <DIO_u8SetPinValue+0x4a>
    1a78:	4f c0       	rjmp	.+158    	; 0x1b18 <DIO_u8SetPinValue+0xe8>
    1a7a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a7c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a7e:	22 30       	cpi	r18, 0x02	; 2
    1a80:	31 05       	cpc	r19, r1
    1a82:	2c f4       	brge	.+10     	; 0x1a8e <DIO_u8SetPinValue+0x5e>
    1a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	71 f0       	breq	.+28     	; 0x1aa8 <DIO_u8SetPinValue+0x78>
    1a8c:	ec c0       	rjmp	.+472    	; 0x1c66 <DIO_u8SetPinValue+0x236>
    1a8e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a90:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a92:	22 30       	cpi	r18, 0x02	; 2
    1a94:	31 05       	cpc	r19, r1
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <DIO_u8SetPinValue+0x6a>
    1a98:	77 c0       	rjmp	.+238    	; 0x1b88 <DIO_u8SetPinValue+0x158>
    1a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9e:	83 30       	cpi	r24, 0x03	; 3
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <DIO_u8SetPinValue+0x76>
    1aa4:	a9 c0       	rjmp	.+338    	; 0x1bf8 <DIO_u8SetPinValue+0x1c8>
    1aa6:	df c0       	rjmp	.+446    	; 0x1c66 <DIO_u8SetPinValue+0x236>
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue) {
    1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	3c 87       	std	Y+12, r19	; 0x0c
    1ab0:	2b 87       	std	Y+11, r18	; 0x0b
    1ab2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	d1 f0       	breq	.+52     	; 0x1aee <DIO_u8SetPinValue+0xbe>
    1aba:	2b 85       	ldd	r18, Y+11	; 0x0b
    1abc:	3c 85       	ldd	r19, Y+12	; 0x0c
    1abe:	21 30       	cpi	r18, 0x01	; 1
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <DIO_u8SetPinValue+0x96>
    1ac4:	d3 c0       	rjmp	.+422    	; 0x1c6c <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1ac6:	ab e3       	ldi	r26, 0x3B	; 59
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	eb e3       	ldi	r30, 0x3B	; 59
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <DIO_u8SetPinValue+0xb4>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <DIO_u8SetPinValue+0xb0>
    1ae8:	84 2b       	or	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	bf c0       	rjmp	.+382    	; 0x1c6c <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1aee:	ab e3       	ldi	r26, 0x3B	; 59
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	eb e3       	ldi	r30, 0x3B	; 59
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	48 2f       	mov	r20, r24
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	02 2e       	mov	r0, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <DIO_u8SetPinValue+0xdc>
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	0a 94       	dec	r0
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <DIO_u8SetPinValue+0xd8>
    1b10:	80 95       	com	r24
    1b12:	84 23       	and	r24, r20
    1b14:	8c 93       	st	X, r24
    1b16:	aa c0       	rjmp	.+340    	; 0x1c6c <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinValue) {
    1b18:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3a 87       	std	Y+10, r19	; 0x0a
    1b20:	29 87       	std	Y+9, r18	; 0x09
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	d1 f0       	breq	.+52     	; 0x1b5e <DIO_u8SetPinValue+0x12e>
    1b2a:	29 85       	ldd	r18, Y+9	; 0x09
    1b2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b2e:	21 30       	cpi	r18, 0x01	; 1
    1b30:	31 05       	cpc	r19, r1
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <DIO_u8SetPinValue+0x106>
    1b34:	9b c0       	rjmp	.+310    	; 0x1c6c <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1b36:	a8 e3       	ldi	r26, 0x38	; 56
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e8 e3       	ldi	r30, 0x38	; 56
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <DIO_u8SetPinValue+0x124>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <DIO_u8SetPinValue+0x120>
    1b58:	84 2b       	or	r24, r20
    1b5a:	8c 93       	st	X, r24
    1b5c:	87 c0       	rjmp	.+270    	; 0x1c6c <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1b5e:	a8 e3       	ldi	r26, 0x38	; 56
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e8 e3       	ldi	r30, 0x38	; 56
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <DIO_u8SetPinValue+0x14c>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <DIO_u8SetPinValue+0x148>
    1b80:	80 95       	com	r24
    1b82:	84 23       	and	r24, r20
    1b84:	8c 93       	st	X, r24
    1b86:	72 c0       	rjmp	.+228    	; 0x1c6c <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PinValue) {
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	38 87       	std	Y+8, r19	; 0x08
    1b90:	2f 83       	std	Y+7, r18	; 0x07
    1b92:	8f 81       	ldd	r24, Y+7	; 0x07
    1b94:	98 85       	ldd	r25, Y+8	; 0x08
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	d1 f0       	breq	.+52     	; 0x1bce <DIO_u8SetPinValue+0x19e>
    1b9a:	2f 81       	ldd	r18, Y+7	; 0x07
    1b9c:	38 85       	ldd	r19, Y+8	; 0x08
    1b9e:	21 30       	cpi	r18, 0x01	; 1
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <DIO_u8SetPinValue+0x176>
    1ba4:	63 c0       	rjmp	.+198    	; 0x1c6c <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1ba6:	a5 e3       	ldi	r26, 0x35	; 53
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e5 e3       	ldi	r30, 0x35	; 53
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <DIO_u8SetPinValue+0x194>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <DIO_u8SetPinValue+0x190>
    1bc8:	84 2b       	or	r24, r20
    1bca:	8c 93       	st	X, r24
    1bcc:	4f c0       	rjmp	.+158    	; 0x1c6c <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1bce:	a5 e3       	ldi	r26, 0x35	; 53
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e5 e3       	ldi	r30, 0x35	; 53
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	48 2f       	mov	r20, r24
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	02 2e       	mov	r0, r18
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <DIO_u8SetPinValue+0x1bc>
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	0a 94       	dec	r0
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <DIO_u8SetPinValue+0x1b8>
    1bf0:	80 95       	com	r24
    1bf2:	84 23       	and	r24, r20
    1bf4:	8c 93       	st	X, r24
    1bf6:	3a c0       	rjmp	.+116    	; 0x1c6c <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PinValue) {
    1bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	3e 83       	std	Y+6, r19	; 0x06
    1c00:	2d 83       	std	Y+5, r18	; 0x05
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	9e 81       	ldd	r25, Y+6	; 0x06
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	c9 f0       	breq	.+50     	; 0x1c3c <DIO_u8SetPinValue+0x20c>
    1c0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c0e:	21 30       	cpi	r18, 0x01	; 1
    1c10:	31 05       	cpc	r19, r1
    1c12:	61 f5       	brne	.+88     	; 0x1c6c <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1c14:	a2 e3       	ldi	r26, 0x32	; 50
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e2 e3       	ldi	r30, 0x32	; 50
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_u8SetPinValue+0x202>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_u8SetPinValue+0x1fe>
    1c36:	84 2b       	or	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	18 c0       	rjmp	.+48     	; 0x1c6c <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1c3c:	a2 e3       	ldi	r26, 0x32	; 50
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e2 e3       	ldi	r30, 0x32	; 50
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_u8SetPinValue+0x22a>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_u8SetPinValue+0x226>
    1c5e:	80 95       	com	r24
    1c60:	84 23       	and	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	03 c0       	rjmp	.+6      	; 0x1c6c <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOTOK;
    1c66:	19 82       	std	Y+1, r1	; 0x01
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <DIO_u8SetPinValue+0x23c>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOTOK;
    1c6a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6e:	2e 96       	adiw	r28, 0x0e	; 14
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId,
		u8 * Copy_Pu8ReturnedValue) {
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	27 97       	sbiw	r28, 0x07	; 7
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	8a 83       	std	Y+2, r24	; 0x02
    1c96:	6b 83       	std	Y+3, r22	; 0x03
    1c98:	5d 83       	std	Y+5, r21	; 0x05
    1c9a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinId <= DIO_u8_PIN7) && (Copy_Pu8ReturnedValue != NULL)) {
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	88 30       	cpi	r24, 0x08	; 8
    1ca4:	08 f0       	brcs	.+2      	; 0x1ca8 <DIO_u8GetPinValue+0x28>
    1ca6:	78 c0       	rjmp	.+240    	; 0x1d98 <DIO_u8GetPinValue+0x118>
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    1caa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <DIO_u8GetPinValue+0x32>
    1cb0:	73 c0       	rjmp	.+230    	; 0x1d98 <DIO_u8GetPinValue+0x118>
		switch (Copy_u8PortId) {
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3f 83       	std	Y+7, r19	; 0x07
    1cba:	2e 83       	std	Y+6, r18	; 0x06
    1cbc:	4e 81       	ldd	r20, Y+6	; 0x06
    1cbe:	5f 81       	ldd	r21, Y+7	; 0x07
    1cc0:	41 30       	cpi	r20, 0x01	; 1
    1cc2:	51 05       	cpc	r21, r1
    1cc4:	59 f1       	breq	.+86     	; 0x1d1c <DIO_u8GetPinValue+0x9c>
    1cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cca:	82 30       	cpi	r24, 0x02	; 2
    1ccc:	91 05       	cpc	r25, r1
    1cce:	34 f4       	brge	.+12     	; 0x1cdc <DIO_u8GetPinValue+0x5c>
    1cd0:	2e 81       	ldd	r18, Y+6	; 0x06
    1cd2:	3f 81       	ldd	r19, Y+7	; 0x07
    1cd4:	21 15       	cp	r18, r1
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	69 f0       	breq	.+26     	; 0x1cf4 <DIO_u8GetPinValue+0x74>
    1cda:	5c c0       	rjmp	.+184    	; 0x1d94 <DIO_u8GetPinValue+0x114>
    1cdc:	4e 81       	ldd	r20, Y+6	; 0x06
    1cde:	5f 81       	ldd	r21, Y+7	; 0x07
    1ce0:	42 30       	cpi	r20, 0x02	; 2
    1ce2:	51 05       	cpc	r21, r1
    1ce4:	79 f1       	breq	.+94     	; 0x1d44 <DIO_u8GetPinValue+0xc4>
    1ce6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cea:	83 30       	cpi	r24, 0x03	; 3
    1cec:	91 05       	cpc	r25, r1
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <DIO_u8GetPinValue+0x72>
    1cf0:	3d c0       	rjmp	.+122    	; 0x1d6c <DIO_u8GetPinValue+0xec>
    1cf2:	50 c0       	rjmp	.+160    	; 0x1d94 <DIO_u8GetPinValue+0x114>
		case DIO_u8_PORTA:
			*Copy_Pu8ReturnedValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    1cf4:	e9 e3       	ldi	r30, 0x39	; 57
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	a9 01       	movw	r20, r18
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <DIO_u8GetPinValue+0x8c>
    1d08:	55 95       	asr	r21
    1d0a:	47 95       	ror	r20
    1d0c:	8a 95       	dec	r24
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <DIO_u8GetPinValue+0x88>
    1d10:	ca 01       	movw	r24, r20
    1d12:	81 70       	andi	r24, 0x01	; 1
    1d14:	ec 81       	ldd	r30, Y+4	; 0x04
    1d16:	fd 81       	ldd	r31, Y+5	; 0x05
    1d18:	80 83       	st	Z, r24
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <DIO_u8GetPinValue+0x11a>
			break;
		case DIO_u8_PORTB:
			*Copy_Pu8ReturnedValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1d1c:	e6 e3       	ldi	r30, 0x36	; 54
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a9 01       	movw	r20, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <DIO_u8GetPinValue+0xb4>
    1d30:	55 95       	asr	r21
    1d32:	47 95       	ror	r20
    1d34:	8a 95       	dec	r24
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <DIO_u8GetPinValue+0xb0>
    1d38:	ca 01       	movw	r24, r20
    1d3a:	81 70       	andi	r24, 0x01	; 1
    1d3c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d3e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d40:	80 83       	st	Z, r24
    1d42:	2b c0       	rjmp	.+86     	; 0x1d9a <DIO_u8GetPinValue+0x11a>
			break;
		case DIO_u8_PORTC:
			*Copy_Pu8ReturnedValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1d44:	e3 e3       	ldi	r30, 0x33	; 51
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a9 01       	movw	r20, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <DIO_u8GetPinValue+0xdc>
    1d58:	55 95       	asr	r21
    1d5a:	47 95       	ror	r20
    1d5c:	8a 95       	dec	r24
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <DIO_u8GetPinValue+0xd8>
    1d60:	ca 01       	movw	r24, r20
    1d62:	81 70       	andi	r24, 0x01	; 1
    1d64:	ec 81       	ldd	r30, Y+4	; 0x04
    1d66:	fd 81       	ldd	r31, Y+5	; 0x05
    1d68:	80 83       	st	Z, r24
    1d6a:	17 c0       	rjmp	.+46     	; 0x1d9a <DIO_u8GetPinValue+0x11a>
			break;
		case DIO_u8_PORTD:
			*Copy_Pu8ReturnedValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    1d6c:	e0 e3       	ldi	r30, 0x30	; 48
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	88 2f       	mov	r24, r24
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a9 01       	movw	r20, r18
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <DIO_u8GetPinValue+0x104>
    1d80:	55 95       	asr	r21
    1d82:	47 95       	ror	r20
    1d84:	8a 95       	dec	r24
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <DIO_u8GetPinValue+0x100>
    1d88:	ca 01       	movw	r24, r20
    1d8a:	81 70       	andi	r24, 0x01	; 1
    1d8c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d8e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d90:	80 83       	st	Z, r24
    1d92:	03 c0       	rjmp	.+6      	; 0x1d9a <DIO_u8GetPinValue+0x11a>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOTOK;
    1d94:	19 82       	std	Y+1, r1	; 0x01
    1d96:	01 c0       	rjmp	.+2      	; 0x1d9a <DIO_u8GetPinValue+0x11a>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOTOK;
    1d98:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d9c:	27 96       	adiw	r28, 0x07	; 7
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <DIO_u8TogPinValue>:

u8 DIO_u8TogPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId) {
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <DIO_u8TogPinValue+0x6>
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <DIO_u8TogPinValue+0x8>
    1db6:	0f 92       	push	r0
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	8a 83       	std	Y+2, r24	; 0x02
    1dbe:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOTOK;
    1dc0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PinId <= DIO_u8_PIN7) {
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	88 30       	cpi	r24, 0x08	; 8
    1dc6:	08 f0       	brcs	.+2      	; 0x1dca <DIO_u8TogPinValue+0x1c>
    1dc8:	72 c0       	rjmp	.+228    	; 0x1eae <DIO_u8TogPinValue+0x100>
		Local_u8ErrorState = STD_TYPES_OK;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PortId) {
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	3d 83       	std	Y+5, r19	; 0x05
    1dd6:	2c 83       	std	Y+4, r18	; 0x04
    1dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dda:	9d 81       	ldd	r25, Y+5	; 0x05
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	91 05       	cpc	r25, r1
    1de0:	49 f1       	breq	.+82     	; 0x1e34 <DIO_u8TogPinValue+0x86>
    1de2:	2c 81       	ldd	r18, Y+4	; 0x04
    1de4:	3d 81       	ldd	r19, Y+5	; 0x05
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <DIO_u8TogPinValue+0x48>
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	9d 81       	ldd	r25, Y+5	; 0x05
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <DIO_u8TogPinValue+0x5e>
    1df4:	5b c0       	rjmp	.+182    	; 0x1eac <DIO_u8TogPinValue+0xfe>
    1df6:	2c 81       	ldd	r18, Y+4	; 0x04
    1df8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	71 f1       	breq	.+92     	; 0x1e5c <DIO_u8TogPinValue+0xae>
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	9d 81       	ldd	r25, Y+5	; 0x05
    1e04:	83 30       	cpi	r24, 0x03	; 3
    1e06:	91 05       	cpc	r25, r1
    1e08:	e9 f1       	breq	.+122    	; 0x1e84 <DIO_u8TogPinValue+0xd6>
    1e0a:	50 c0       	rjmp	.+160    	; 0x1eac <DIO_u8TogPinValue+0xfe>
		case DIO_u8_PORTA:
			TOG_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1e0c:	ab e3       	ldi	r26, 0x3B	; 59
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	eb e3       	ldi	r30, 0x3B	; 59
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 2e       	mov	r0, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <DIO_u8TogPinValue+0x7c>
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <DIO_u8TogPinValue+0x78>
    1e2e:	84 27       	eor	r24, r20
    1e30:	8c 93       	st	X, r24
    1e32:	3d c0       	rjmp	.+122    	; 0x1eae <DIO_u8TogPinValue+0x100>
			break;
		case DIO_u8_PORTB:
			TOG_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1e34:	a8 e3       	ldi	r26, 0x38	; 56
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e8 e3       	ldi	r30, 0x38	; 56
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	48 2f       	mov	r20, r24
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 2e       	mov	r0, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <DIO_u8TogPinValue+0xa4>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0a 94       	dec	r0
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <DIO_u8TogPinValue+0xa0>
    1e56:	84 27       	eor	r24, r20
    1e58:	8c 93       	st	X, r24
    1e5a:	29 c0       	rjmp	.+82     	; 0x1eae <DIO_u8TogPinValue+0x100>
			break;
		case DIO_u8_PORTC:
			TOG_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1e5c:	a5 e3       	ldi	r26, 0x35	; 53
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e5 e3       	ldi	r30, 0x35	; 53
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <DIO_u8TogPinValue+0xcc>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <DIO_u8TogPinValue+0xc8>
    1e7e:	84 27       	eor	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	15 c0       	rjmp	.+42     	; 0x1eae <DIO_u8TogPinValue+0x100>
			break;
		case DIO_u8_PORTD:
			TOG_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1e84:	a2 e3       	ldi	r26, 0x32	; 50
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e2 e3       	ldi	r30, 0x32	; 50
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <DIO_u8TogPinValue+0xf4>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <DIO_u8TogPinValue+0xf0>
    1ea6:	84 27       	eor	r24, r20
    1ea8:	8c 93       	st	X, r24
    1eaa:	01 c0       	rjmp	.+2      	; 0x1eae <DIO_u8TogPinValue+0x100>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOTOK;
    1eac:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection) {
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	2d 97       	sbiw	r28, 0x0d	; 13
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	8a 83       	std	Y+2, r24	; 0x02
    1ed6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId) {
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	3d 87       	std	Y+13, r19	; 0x0d
    1ee4:	2c 87       	std	Y+12, r18	; 0x0c
    1ee6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ee8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	91 05       	cpc	r25, r1
    1eee:	e9 f1       	breq	.+122    	; 0x1f6a <DIO_u8SetPortDirection+0xaa>
    1ef0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ef2:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ef4:	22 30       	cpi	r18, 0x02	; 2
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <DIO_u8SetPortDirection+0x44>
    1efa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1efc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	71 f0       	breq	.+28     	; 0x1f1e <DIO_u8SetPortDirection+0x5e>
    1f02:	a5 c0       	rjmp	.+330    	; 0x204e <DIO_u8SetPortDirection+0x18e>
    1f04:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f06:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f08:	22 30       	cpi	r18, 0x02	; 2
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <DIO_u8SetPortDirection+0x50>
    1f0e:	53 c0       	rjmp	.+166    	; 0x1fb6 <DIO_u8SetPortDirection+0xf6>
    1f10:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f12:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f14:	83 30       	cpi	r24, 0x03	; 3
    1f16:	91 05       	cpc	r25, r1
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <DIO_u8SetPortDirection+0x5c>
    1f1a:	73 c0       	rjmp	.+230    	; 0x2002 <DIO_u8SetPortDirection+0x142>
    1f1c:	98 c0       	rjmp	.+304    	; 0x204e <DIO_u8SetPortDirection+0x18e>
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection) {
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3b 87       	std	Y+11, r19	; 0x0b
    1f26:	2a 87       	std	Y+10, r18	; 0x0a
    1f28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	91 05       	cpc	r25, r1
    1f30:	a9 f0       	breq	.+42     	; 0x1f5c <DIO_u8SetPortDirection+0x9c>
    1f32:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f34:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	41 f0       	breq	.+16     	; 0x1f4c <DIO_u8SetPortDirection+0x8c>
    1f3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	89 f4       	brne	.+34     	; 0x1f66 <DIO_u8SetPortDirection+0xa6>
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRA_REG = 0x00;
    1f44:	ea e3       	ldi	r30, 0x3A	; 58
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	10 82       	st	Z, r1
    1f4a:	82 c0       	rjmp	.+260    	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		case DIO_u8_INPUT_UP:
			DIO_u8_DDRA_REG = 0x00;
    1f4c:	ea e3       	ldi	r30, 0x3A	; 58
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	10 82       	st	Z, r1
			DIO_u8_PORTA_REG = 0xff;
    1f52:	eb e3       	ldi	r30, 0x3B	; 59
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	8f ef       	ldi	r24, 0xFF	; 255
    1f58:	80 83       	st	Z, r24
    1f5a:	7a c0       	rjmp	.+244    	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = 0xff;
    1f5c:	ea e3       	ldi	r30, 0x3A	; 58
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	8f ef       	ldi	r24, 0xFF	; 255
    1f62:	80 83       	st	Z, r24
    1f64:	75 c0       	rjmp	.+234    	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOTOK;
    1f66:	19 82       	std	Y+1, r1	; 0x01
    1f68:	73 c0       	rjmp	.+230    	; 0x2050 <DIO_u8SetPortDirection+0x190>
		}
		break;
	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection) {
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	39 87       	std	Y+9, r19	; 0x09
    1f72:	28 87       	std	Y+8, r18	; 0x08
    1f74:	88 85       	ldd	r24, Y+8	; 0x08
    1f76:	99 85       	ldd	r25, Y+9	; 0x09
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	a9 f0       	breq	.+42     	; 0x1fa8 <DIO_u8SetPortDirection+0xe8>
    1f7e:	28 85       	ldd	r18, Y+8	; 0x08
    1f80:	39 85       	ldd	r19, Y+9	; 0x09
    1f82:	22 30       	cpi	r18, 0x02	; 2
    1f84:	31 05       	cpc	r19, r1
    1f86:	41 f0       	breq	.+16     	; 0x1f98 <DIO_u8SetPortDirection+0xd8>
    1f88:	88 85       	ldd	r24, Y+8	; 0x08
    1f8a:	99 85       	ldd	r25, Y+9	; 0x09
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	89 f4       	brne	.+34     	; 0x1fb2 <DIO_u8SetPortDirection+0xf2>
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRB_REG = 0x00;
    1f90:	e7 e3       	ldi	r30, 0x37	; 55
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	10 82       	st	Z, r1
    1f96:	5c c0       	rjmp	.+184    	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		case DIO_u8_INPUT_UP:
			DIO_u8_DDRB_REG = 0x00;
    1f98:	e7 e3       	ldi	r30, 0x37	; 55
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	10 82       	st	Z, r1
			DIO_u8_PORTB_REG = 0xff;
    1f9e:	e8 e3       	ldi	r30, 0x38	; 56
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	8f ef       	ldi	r24, 0xFF	; 255
    1fa4:	80 83       	st	Z, r24
    1fa6:	54 c0       	rjmp	.+168    	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = 0xff;
    1fa8:	e7 e3       	ldi	r30, 0x37	; 55
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	8f ef       	ldi	r24, 0xFF	; 255
    1fae:	80 83       	st	Z, r24
    1fb0:	4f c0       	rjmp	.+158    	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOTOK;
    1fb2:	19 82       	std	Y+1, r1	; 0x01
    1fb4:	4d c0       	rjmp	.+154    	; 0x2050 <DIO_u8SetPortDirection+0x190>
		}
		break;
	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection) {
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	3f 83       	std	Y+7, r19	; 0x07
    1fbe:	2e 83       	std	Y+6, r18	; 0x06
    1fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	a9 f0       	breq	.+42     	; 0x1ff4 <DIO_u8SetPortDirection+0x134>
    1fca:	2e 81       	ldd	r18, Y+6	; 0x06
    1fcc:	3f 81       	ldd	r19, Y+7	; 0x07
    1fce:	22 30       	cpi	r18, 0x02	; 2
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	41 f0       	breq	.+16     	; 0x1fe4 <DIO_u8SetPortDirection+0x124>
    1fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	89 f4       	brne	.+34     	; 0x1ffe <DIO_u8SetPortDirection+0x13e>
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRC_REG = 0x00;
    1fdc:	e4 e3       	ldi	r30, 0x34	; 52
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	10 82       	st	Z, r1
    1fe2:	36 c0       	rjmp	.+108    	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		case DIO_u8_INPUT_UP:
			DIO_u8_DDRC_REG = 0x00;
    1fe4:	e4 e3       	ldi	r30, 0x34	; 52
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	10 82       	st	Z, r1
			DIO_u8_PORTC_REG = 0xff;
    1fea:	e5 e3       	ldi	r30, 0x35	; 53
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	8f ef       	ldi	r24, 0xFF	; 255
    1ff0:	80 83       	st	Z, r24
    1ff2:	2e c0       	rjmp	.+92     	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = 0xff;
    1ff4:	e4 e3       	ldi	r30, 0x34	; 52
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	8f ef       	ldi	r24, 0xFF	; 255
    1ffa:	80 83       	st	Z, r24
    1ffc:	29 c0       	rjmp	.+82     	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOTOK;
    1ffe:	19 82       	std	Y+1, r1	; 0x01
    2000:	27 c0       	rjmp	.+78     	; 0x2050 <DIO_u8SetPortDirection+0x190>
		}
		break;
	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection) {
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	3d 83       	std	Y+5, r19	; 0x05
    200a:	2c 83       	std	Y+4, r18	; 0x04
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	91 05       	cpc	r25, r1
    2014:	a9 f0       	breq	.+42     	; 0x2040 <DIO_u8SetPortDirection+0x180>
    2016:	2c 81       	ldd	r18, Y+4	; 0x04
    2018:	3d 81       	ldd	r19, Y+5	; 0x05
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	41 f0       	breq	.+16     	; 0x2030 <DIO_u8SetPortDirection+0x170>
    2020:	8c 81       	ldd	r24, Y+4	; 0x04
    2022:	9d 81       	ldd	r25, Y+5	; 0x05
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	89 f4       	brne	.+34     	; 0x204a <DIO_u8SetPortDirection+0x18a>
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRD_REG = 0x00;
    2028:	e1 e3       	ldi	r30, 0x31	; 49
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	10 82       	st	Z, r1
    202e:	10 c0       	rjmp	.+32     	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		case DIO_u8_INPUT_UP:
			DIO_u8_DDRD_REG = 0x00;
    2030:	e1 e3       	ldi	r30, 0x31	; 49
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	10 82       	st	Z, r1
			DIO_u8_PORTD_REG = 0xff;
    2036:	e2 e3       	ldi	r30, 0x32	; 50
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	8f ef       	ldi	r24, 0xFF	; 255
    203c:	80 83       	st	Z, r24
    203e:	08 c0       	rjmp	.+16     	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = 0xff;
    2040:	e1 e3       	ldi	r30, 0x31	; 49
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	8f ef       	ldi	r24, 0xFF	; 255
    2046:	80 83       	st	Z, r24
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <DIO_u8SetPortDirection+0x190>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOTOK;
    204a:	19 82       	std	Y+1, r1	; 0x01
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <DIO_u8SetPortDirection+0x190>
		}
		break;
	default:
		Local_u8ErrorState = STD_TYPES_NOTOK;
    204e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2050:	89 81       	ldd	r24, Y+1	; 0x01
}
    2052:	2d 96       	adiw	r28, 0x0d	; 13
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	00 d0       	rcall	.+0      	; 0x206a <DIO_u8SetPortValue+0x6>
    206a:	00 d0       	rcall	.+0      	; 0x206c <DIO_u8SetPortValue+0x8>
    206c:	0f 92       	push	r0
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	8a 83       	std	Y+2, r24	; 0x02
    2074:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	3d 83       	std	Y+5, r19	; 0x05
    2082:	2c 83       	std	Y+4, r18	; 0x04
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	9d 81       	ldd	r25, Y+5	; 0x05
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	91 05       	cpc	r25, r1
    208c:	d1 f0       	breq	.+52     	; 0x20c2 <DIO_u8SetPortValue+0x5e>
    208e:	2c 81       	ldd	r18, Y+4	; 0x04
    2090:	3d 81       	ldd	r19, Y+5	; 0x05
    2092:	22 30       	cpi	r18, 0x02	; 2
    2094:	31 05       	cpc	r19, r1
    2096:	2c f4       	brge	.+10     	; 0x20a2 <DIO_u8SetPortValue+0x3e>
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	9d 81       	ldd	r25, Y+5	; 0x05
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	61 f0       	breq	.+24     	; 0x20b8 <DIO_u8SetPortValue+0x54>
    20a0:	1f c0       	rjmp	.+62     	; 0x20e0 <DIO_u8SetPortValue+0x7c>
    20a2:	2c 81       	ldd	r18, Y+4	; 0x04
    20a4:	3d 81       	ldd	r19, Y+5	; 0x05
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	81 f0       	breq	.+32     	; 0x20cc <DIO_u8SetPortValue+0x68>
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	9d 81       	ldd	r25, Y+5	; 0x05
    20b0:	83 30       	cpi	r24, 0x03	; 3
    20b2:	91 05       	cpc	r25, r1
    20b4:	81 f0       	breq	.+32     	; 0x20d6 <DIO_u8SetPortValue+0x72>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <DIO_u8SetPortValue+0x7c>
	{
	case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    20b8:	eb e3       	ldi	r30, 0x3B	; 59
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	80 83       	st	Z, r24
    20c0:	10 c0       	rjmp	.+32     	; 0x20e2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    20c2:	e8 e3       	ldi	r30, 0x38	; 56
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	80 83       	st	Z, r24
    20ca:	0b c0       	rjmp	.+22     	; 0x20e2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    20cc:	e5 e3       	ldi	r30, 0x35	; 53
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	80 83       	st	Z, r24
    20d4:	06 c0       	rjmp	.+12     	; 0x20e2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    20d6:	e2 e3       	ldi	r30, 0x32	; 50
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	80 83       	st	Z, r24
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = STD_TYPES_NOTOK;
    20e0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 * Copy_Pu8ReturnedPortValue)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <DIO_u8GetPortValue+0x6>
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <DIO_u8GetPortValue+0x8>
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <DIO_u8GetPortValue+0xa>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	8a 83       	std	Y+2, r24	; 0x02
    2104:	7c 83       	std	Y+4, r23	; 0x04
    2106:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8ReturnedPortValue != NULL)
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	e9 f1       	breq	.+122    	; 0x218e <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	3e 83       	std	Y+6, r19	; 0x06
    211c:	2d 83       	std	Y+5, r18	; 0x05
    211e:	8d 81       	ldd	r24, Y+5	; 0x05
    2120:	9e 81       	ldd	r25, Y+6	; 0x06
    2122:	81 30       	cpi	r24, 0x01	; 1
    2124:	91 05       	cpc	r25, r1
    2126:	e1 f0       	breq	.+56     	; 0x2160 <DIO_u8GetPortValue+0x6c>
    2128:	2d 81       	ldd	r18, Y+5	; 0x05
    212a:	3e 81       	ldd	r19, Y+6	; 0x06
    212c:	22 30       	cpi	r18, 0x02	; 2
    212e:	31 05       	cpc	r19, r1
    2130:	2c f4       	brge	.+10     	; 0x213c <DIO_u8GetPortValue+0x48>
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	61 f0       	breq	.+24     	; 0x2152 <DIO_u8GetPortValue+0x5e>
    213a:	27 c0       	rjmp	.+78     	; 0x218a <DIO_u8GetPortValue+0x96>
    213c:	2d 81       	ldd	r18, Y+5	; 0x05
    213e:	3e 81       	ldd	r19, Y+6	; 0x06
    2140:	22 30       	cpi	r18, 0x02	; 2
    2142:	31 05       	cpc	r19, r1
    2144:	a1 f0       	breq	.+40     	; 0x216e <DIO_u8GetPortValue+0x7a>
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	9e 81       	ldd	r25, Y+6	; 0x06
    214a:	83 30       	cpi	r24, 0x03	; 3
    214c:	91 05       	cpc	r25, r1
    214e:	b1 f0       	breq	.+44     	; 0x217c <DIO_u8GetPortValue+0x88>
    2150:	1c c0       	rjmp	.+56     	; 0x218a <DIO_u8GetPortValue+0x96>
		{
		case DIO_u8_PORTA:*Copy_Pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    2152:	e9 e3       	ldi	r30, 0x39	; 57
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	eb 81       	ldd	r30, Y+3	; 0x03
    215a:	fc 81       	ldd	r31, Y+4	; 0x04
    215c:	80 83       	st	Z, r24
    215e:	18 c0       	rjmp	.+48     	; 0x2190 <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTB:*Copy_Pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    2160:	e6 e3       	ldi	r30, 0x36	; 54
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	eb 81       	ldd	r30, Y+3	; 0x03
    2168:	fc 81       	ldd	r31, Y+4	; 0x04
    216a:	80 83       	st	Z, r24
    216c:	11 c0       	rjmp	.+34     	; 0x2190 <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTC:*Copy_Pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    216e:	e3 e3       	ldi	r30, 0x33	; 51
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	eb 81       	ldd	r30, Y+3	; 0x03
    2176:	fc 81       	ldd	r31, Y+4	; 0x04
    2178:	80 83       	st	Z, r24
    217a:	0a c0       	rjmp	.+20     	; 0x2190 <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTD:*Copy_Pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    217c:	e0 e3       	ldi	r30, 0x30	; 48
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	eb 81       	ldd	r30, Y+3	; 0x03
    2184:	fc 81       	ldd	r31, Y+4	; 0x04
    2186:	80 83       	st	Z, r24
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <DIO_u8GetPortValue+0x9c>
		default          :Local_u8ErrorState = STD_TYPES_NOTOK;
    218a:	19 82       	std	Y+1, r1	; 0x01
    218c:	01 c0       	rjmp	.+2      	; 0x2190 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOTOK;
    218e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2190:	89 81       	ldd	r24, Y+1	; 0x01
}
    2192:	26 96       	adiw	r28, 0x06	; 6
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <EXTI_u8INIT>:
static void (*EXTI_APtrToFun[3])(void)={
		NULL, NULL, NULL
};


u8 EXTI_u8INIT(EXTINum_enumType COPY_enuEXTI_NUM, EXTITrigSourc_enumType COPY_enuEXTI_SenseControl){
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	2b 97       	sbiw	r28, 0x0b	; 11
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	8a 83       	std	Y+2, r24	; 0x02
    21ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	89 83       	std	Y+1, r24	; 0x01

	/*Select EXTI Number*/
	switch (COPY_enuEXTI_NUM)
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	3b 87       	std	Y+11, r19	; 0x0b
    21c8:	2a 87       	std	Y+10, r18	; 0x0a
    21ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    21cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	91 05       	cpc	r25, r1
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <EXTI_u8INIT+0x32>
    21d4:	86 c0       	rjmp	.+268    	; 0x22e2 <EXTI_u8INIT+0x13e>
    21d6:	2a 85       	ldd	r18, Y+10	; 0x0a
    21d8:	3b 85       	ldd	r19, Y+11	; 0x0b
    21da:	22 30       	cpi	r18, 0x02	; 2
    21dc:	31 05       	cpc	r19, r1
    21de:	09 f4       	brne	.+2      	; 0x21e2 <EXTI_u8INIT+0x3e>
    21e0:	fb c0       	rjmp	.+502    	; 0x23d8 <EXTI_u8INIT+0x234>
    21e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	09 f0       	breq	.+2      	; 0x21ec <EXTI_u8INIT+0x48>
    21ea:	24 c1       	rjmp	.+584    	; 0x2434 <EXTI_u8INIT+0x290>
	{
	case EXTI_u8_EXTI_0:
		/* select trigger */
		switch (COPY_enuEXTI_SenseControl)
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	39 87       	std	Y+9, r19	; 0x09
    21f4:	28 87       	std	Y+8, r18	; 0x08
    21f6:	88 85       	ldd	r24, Y+8	; 0x08
    21f8:	99 85       	ldd	r25, Y+9	; 0x09
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	91 05       	cpc	r25, r1
    21fe:	09 f4       	brne	.+2      	; 0x2202 <EXTI_u8INIT+0x5e>
    2200:	42 c0       	rjmp	.+132    	; 0x2286 <EXTI_u8INIT+0xe2>
    2202:	28 85       	ldd	r18, Y+8	; 0x08
    2204:	39 85       	ldd	r19, Y+9	; 0x09
    2206:	22 30       	cpi	r18, 0x02	; 2
    2208:	31 05       	cpc	r19, r1
    220a:	34 f4       	brge	.+12     	; 0x2218 <EXTI_u8INIT+0x74>
    220c:	88 85       	ldd	r24, Y+8	; 0x08
    220e:	99 85       	ldd	r25, Y+9	; 0x09
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	09 f4       	brne	.+2      	; 0x2216 <EXTI_u8INIT+0x72>
    2214:	4e c0       	rjmp	.+156    	; 0x22b2 <EXTI_u8INIT+0x10e>
    2216:	63 c0       	rjmp	.+198    	; 0x22de <EXTI_u8INIT+0x13a>
    2218:	28 85       	ldd	r18, Y+8	; 0x08
    221a:	39 85       	ldd	r19, Y+9	; 0x09
    221c:	22 30       	cpi	r18, 0x02	; 2
    221e:	31 05       	cpc	r19, r1
    2220:	31 f0       	breq	.+12     	; 0x222e <EXTI_u8INIT+0x8a>
    2222:	88 85       	ldd	r24, Y+8	; 0x08
    2224:	99 85       	ldd	r25, Y+9	; 0x09
    2226:	83 30       	cpi	r24, 0x03	; 3
    2228:	91 05       	cpc	r25, r1
    222a:	b9 f0       	breq	.+46     	; 0x225a <EXTI_u8INIT+0xb6>
    222c:	58 c0       	rjmp	.+176    	; 0x22de <EXTI_u8INIT+0x13a>
		{
		case EXTI_u8_ANY_LOGICAL_CHANGE:
			/* code */
			CLR_BIT(EXTI_u8_MCUCR_REG,1);
    222e:	a5 e5       	ldi	r26, 0x55	; 85
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e5 e5       	ldi	r30, 0x55	; 85
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	8d 7f       	andi	r24, 0xFD	; 253
    223a:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG,0);
    223c:	a5 e5       	ldi	r26, 0x55	; 85
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e5 e5       	ldi	r30, 0x55	; 85
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	81 60       	ori	r24, 0x01	; 1
    2248:	8c 93       	st	X, r24
			/*enable EXTI 0*/
			SET_BIT(EXTI_u8_GICR_REG,6);
    224a:	ab e5       	ldi	r26, 0x5B	; 91
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	eb e5       	ldi	r30, 0x5B	; 91
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	80 64       	ori	r24, 0x40	; 64
    2256:	8c 93       	st	X, r24
    2258:	ee c0       	rjmp	.+476    	; 0x2436 <EXTI_u8INIT+0x292>

			break;

		case EXTI_u8_LOW_LEVEL:
			/* code */
			CLR_BIT(EXTI_u8_MCUCR_REG,1);
    225a:	a5 e5       	ldi	r26, 0x55	; 85
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e5 e5       	ldi	r30, 0x55	; 85
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	8d 7f       	andi	r24, 0xFD	; 253
    2266:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG,0);
    2268:	a5 e5       	ldi	r26, 0x55	; 85
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e5 e5       	ldi	r30, 0x55	; 85
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8e 7f       	andi	r24, 0xFE	; 254
    2274:	8c 93       	st	X, r24
			/*enable EXTI 0*/
			SET_BIT(EXTI_u8_GICR_REG,6);
    2276:	ab e5       	ldi	r26, 0x5B	; 91
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	eb e5       	ldi	r30, 0x5B	; 91
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	80 64       	ori	r24, 0x40	; 64
    2282:	8c 93       	st	X, r24
    2284:	d8 c0       	rjmp	.+432    	; 0x2436 <EXTI_u8INIT+0x292>

			break;
		case EXTI_u8_RISING_EDGE:
			/* code */
			SET_BIT(EXTI_u8_MCUCR_REG,1);
    2286:	a5 e5       	ldi	r26, 0x55	; 85
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e5 e5       	ldi	r30, 0x55	; 85
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	82 60       	ori	r24, 0x02	; 2
    2292:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG,0);
    2294:	a5 e5       	ldi	r26, 0x55	; 85
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e5 e5       	ldi	r30, 0x55	; 85
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	81 60       	ori	r24, 0x01	; 1
    22a0:	8c 93       	st	X, r24
			/*enable EXTI 0*/
			SET_BIT(EXTI_u8_GICR_REG,6);
    22a2:	ab e5       	ldi	r26, 0x5B	; 91
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	eb e5       	ldi	r30, 0x5B	; 91
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	80 64       	ori	r24, 0x40	; 64
    22ae:	8c 93       	st	X, r24
    22b0:	c2 c0       	rjmp	.+388    	; 0x2436 <EXTI_u8INIT+0x292>

			break;

		case EXTI_u8_FALLING_EDGE:
			/* code */
			SET_BIT(EXTI_u8_MCUCR_REG,1);
    22b2:	a5 e5       	ldi	r26, 0x55	; 85
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e5 e5       	ldi	r30, 0x55	; 85
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	82 60       	ori	r24, 0x02	; 2
    22be:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG,0);
    22c0:	a5 e5       	ldi	r26, 0x55	; 85
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e5 e5       	ldi	r30, 0x55	; 85
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	8e 7f       	andi	r24, 0xFE	; 254
    22cc:	8c 93       	st	X, r24
			/*enable EXTI 0*/
			SET_BIT(EXTI_u8_GICR_REG,6);
    22ce:	ab e5       	ldi	r26, 0x5B	; 91
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	eb e5       	ldi	r30, 0x5B	; 91
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	80 64       	ori	r24, 0x40	; 64
    22da:	8c 93       	st	X, r24
    22dc:	ac c0       	rjmp	.+344    	; 0x2436 <EXTI_u8INIT+0x292>

			break;

		default:Local_u8ErrorState=STD_TYPES_NOTOK;
    22de:	19 82       	std	Y+1, r1	; 0x01
    22e0:	aa c0       	rjmp	.+340    	; 0x2436 <EXTI_u8INIT+0x292>
		}
		break;

		case EXTI_u8_EXTI_1:
			/* select trigger */
			switch (COPY_enuEXTI_SenseControl)
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	3f 83       	std	Y+7, r19	; 0x07
    22ea:	2e 83       	std	Y+6, r18	; 0x06
    22ec:	8e 81       	ldd	r24, Y+6	; 0x06
    22ee:	9f 81       	ldd	r25, Y+7	; 0x07
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	91 05       	cpc	r25, r1
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <EXTI_u8INIT+0x154>
    22f6:	42 c0       	rjmp	.+132    	; 0x237c <EXTI_u8INIT+0x1d8>
    22f8:	2e 81       	ldd	r18, Y+6	; 0x06
    22fa:	3f 81       	ldd	r19, Y+7	; 0x07
    22fc:	22 30       	cpi	r18, 0x02	; 2
    22fe:	31 05       	cpc	r19, r1
    2300:	34 f4       	brge	.+12     	; 0x230e <EXTI_u8INIT+0x16a>
    2302:	8e 81       	ldd	r24, Y+6	; 0x06
    2304:	9f 81       	ldd	r25, Y+7	; 0x07
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	09 f4       	brne	.+2      	; 0x230c <EXTI_u8INIT+0x168>
    230a:	4e c0       	rjmp	.+156    	; 0x23a8 <EXTI_u8INIT+0x204>
    230c:	63 c0       	rjmp	.+198    	; 0x23d4 <EXTI_u8INIT+0x230>
    230e:	2e 81       	ldd	r18, Y+6	; 0x06
    2310:	3f 81       	ldd	r19, Y+7	; 0x07
    2312:	22 30       	cpi	r18, 0x02	; 2
    2314:	31 05       	cpc	r19, r1
    2316:	31 f0       	breq	.+12     	; 0x2324 <EXTI_u8INIT+0x180>
    2318:	8e 81       	ldd	r24, Y+6	; 0x06
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	83 30       	cpi	r24, 0x03	; 3
    231e:	91 05       	cpc	r25, r1
    2320:	b9 f0       	breq	.+46     	; 0x2350 <EXTI_u8INIT+0x1ac>
    2322:	58 c0       	rjmp	.+176    	; 0x23d4 <EXTI_u8INIT+0x230>
			{
			case EXTI_u8_ANY_LOGICAL_CHANGE:
				/* code */
				CLR_BIT(EXTI_u8_MCUCR_REG,3);
    2324:	a5 e5       	ldi	r26, 0x55	; 85
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e5 e5       	ldi	r30, 0x55	; 85
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	87 7f       	andi	r24, 0xF7	; 247
    2330:	8c 93       	st	X, r24
				SET_BIT(EXTI_u8_MCUCR_REG,2);
    2332:	a5 e5       	ldi	r26, 0x55	; 85
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e5 e5       	ldi	r30, 0x55	; 85
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	84 60       	ori	r24, 0x04	; 4
    233e:	8c 93       	st	X, r24
				/*enable EXTI 0*/
				SET_BIT(EXTI_u8_GICR_REG,7);
    2340:	ab e5       	ldi	r26, 0x5B	; 91
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	eb e5       	ldi	r30, 0x5B	; 91
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	80 68       	ori	r24, 0x80	; 128
    234c:	8c 93       	st	X, r24
    234e:	73 c0       	rjmp	.+230    	; 0x2436 <EXTI_u8INIT+0x292>

				break;

			case EXTI_u8_LOW_LEVEL:
				/* code */
				CLR_BIT(EXTI_u8_MCUCR_REG,3);
    2350:	a5 e5       	ldi	r26, 0x55	; 85
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e5 e5       	ldi	r30, 0x55	; 85
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	87 7f       	andi	r24, 0xF7	; 247
    235c:	8c 93       	st	X, r24
				CLR_BIT(EXTI_u8_MCUCR_REG,2);
    235e:	a5 e5       	ldi	r26, 0x55	; 85
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e5 e5       	ldi	r30, 0x55	; 85
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	8b 7f       	andi	r24, 0xFB	; 251
    236a:	8c 93       	st	X, r24
				/*enable EXTI 0*/
				SET_BIT(EXTI_u8_GICR_REG,7);
    236c:	ab e5       	ldi	r26, 0x5B	; 91
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	eb e5       	ldi	r30, 0x5B	; 91
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	80 68       	ori	r24, 0x80	; 128
    2378:	8c 93       	st	X, r24
    237a:	5d c0       	rjmp	.+186    	; 0x2436 <EXTI_u8INIT+0x292>

				break;
			case EXTI_u8_RISING_EDGE:
				/* code */
				SET_BIT(EXTI_u8_MCUCR_REG,3);
    237c:	a5 e5       	ldi	r26, 0x55	; 85
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e5 e5       	ldi	r30, 0x55	; 85
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	88 60       	ori	r24, 0x08	; 8
    2388:	8c 93       	st	X, r24
				SET_BIT(EXTI_u8_MCUCR_REG,2);
    238a:	a5 e5       	ldi	r26, 0x55	; 85
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e5 e5       	ldi	r30, 0x55	; 85
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	84 60       	ori	r24, 0x04	; 4
    2396:	8c 93       	st	X, r24
				/*enable EXTI 0*/
				SET_BIT(EXTI_u8_GICR_REG,7);
    2398:	ab e5       	ldi	r26, 0x5B	; 91
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	eb e5       	ldi	r30, 0x5B	; 91
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	80 68       	ori	r24, 0x80	; 128
    23a4:	8c 93       	st	X, r24
    23a6:	47 c0       	rjmp	.+142    	; 0x2436 <EXTI_u8INIT+0x292>

				break;

			case EXTI_u8_FALLING_EDGE:
				/* code */
				SET_BIT(EXTI_u8_MCUCR_REG,3);
    23a8:	a5 e5       	ldi	r26, 0x55	; 85
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e5 e5       	ldi	r30, 0x55	; 85
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	88 60       	ori	r24, 0x08	; 8
    23b4:	8c 93       	st	X, r24
				CLR_BIT(EXTI_u8_MCUCR_REG,2);
    23b6:	a5 e5       	ldi	r26, 0x55	; 85
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e5 e5       	ldi	r30, 0x55	; 85
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	8b 7f       	andi	r24, 0xFB	; 251
    23c2:	8c 93       	st	X, r24
				/*enable EXTI 0*/
				SET_BIT(EXTI_u8_GICR_REG,7);
    23c4:	ab e5       	ldi	r26, 0x5B	; 91
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	eb e5       	ldi	r30, 0x5B	; 91
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	80 68       	ori	r24, 0x80	; 128
    23d0:	8c 93       	st	X, r24
    23d2:	31 c0       	rjmp	.+98     	; 0x2436 <EXTI_u8INIT+0x292>

				break;

			default: Local_u8ErrorState=STD_TYPES_NOTOK;
    23d4:	19 82       	std	Y+1, r1	; 0x01
    23d6:	2f c0       	rjmp	.+94     	; 0x2436 <EXTI_u8INIT+0x292>
			break;
			}
			break;
			case EXTI_u8_EXTI_2:
				/* select trigger */
				switch (COPY_enuEXTI_SenseControl)
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	3d 83       	std	Y+5, r19	; 0x05
    23e0:	2c 83       	std	Y+4, r18	; 0x04
    23e2:	8c 81       	ldd	r24, Y+4	; 0x04
    23e4:	9d 81       	ldd	r25, Y+5	; 0x05
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	a1 f0       	breq	.+40     	; 0x2412 <EXTI_u8INIT+0x26e>
    23ea:	2c 81       	ldd	r18, Y+4	; 0x04
    23ec:	3d 81       	ldd	r19, Y+5	; 0x05
    23ee:	21 30       	cpi	r18, 0x01	; 1
    23f0:	31 05       	cpc	r19, r1
    23f2:	f1 f4       	brne	.+60     	; 0x2430 <EXTI_u8INIT+0x28c>
				{
				case EXTI_u8_RISING_EDGE:
					/* code */
					SET_BIT(EXTI_u8_MCUCSR_REG,6);
    23f4:	a4 e5       	ldi	r26, 0x54	; 84
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e4 e5       	ldi	r30, 0x54	; 84
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	80 64       	ori	r24, 0x40	; 64
    2400:	8c 93       	st	X, r24
					/*enable EXTI 0*/
					SET_BIT(EXTI_u8_GICR_REG,5);
    2402:	ab e5       	ldi	r26, 0x5B	; 91
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	eb e5       	ldi	r30, 0x5B	; 91
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	80 62       	ori	r24, 0x20	; 32
    240e:	8c 93       	st	X, r24
    2410:	12 c0       	rjmp	.+36     	; 0x2436 <EXTI_u8INIT+0x292>

					break;

				case EXTI_u8_FALLING_EDGE:
					/* code */
					CLR_BIT(EXTI_u8_MCUCSR_REG,6);
    2412:	a4 e5       	ldi	r26, 0x54	; 84
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e4 e5       	ldi	r30, 0x54	; 84
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8f 7b       	andi	r24, 0xBF	; 191
    241e:	8c 93       	st	X, r24
					/*enable EXTI 0*/
					SET_BIT(EXTI_u8_GICR_REG,5);
    2420:	ab e5       	ldi	r26, 0x5B	; 91
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	eb e5       	ldi	r30, 0x5B	; 91
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	80 62       	ori	r24, 0x20	; 32
    242c:	8c 93       	st	X, r24
    242e:	03 c0       	rjmp	.+6      	; 0x2436 <EXTI_u8INIT+0x292>

					break;

				default:
					Local_u8ErrorState=STD_TYPES_NOTOK;
    2430:	19 82       	std	Y+1, r1	; 0x01
    2432:	01 c0       	rjmp	.+2      	; 0x2436 <EXTI_u8INIT+0x292>
					break;
				}
				break;
				default:
					Local_u8ErrorState=STD_TYPES_NOTOK;
    2434:	19 82       	std	Y+1, r1	; 0x01
					break;
	}

	return Local_u8ErrorState;
    2436:	89 81       	ldd	r24, Y+1	; 0x01
}
    2438:	2b 96       	adiw	r28, 0x0b	; 11
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <EXTI_u8Enable>:

u8 EXTI_u8Enable(EXTINum_enumType COPY_enuEXTI_NUM){
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <EXTI_u8Enable+0x6>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <EXTI_u8Enable+0x8>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	89 83       	std	Y+1, r24	; 0x01

	switch (COPY_enuEXTI_NUM)
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	3c 83       	std	Y+4, r19	; 0x04
    2464:	2b 83       	std	Y+3, r18	; 0x03
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	91 05       	cpc	r25, r1
    246e:	89 f0       	breq	.+34     	; 0x2492 <EXTI_u8Enable+0x48>
    2470:	2b 81       	ldd	r18, Y+3	; 0x03
    2472:	3c 81       	ldd	r19, Y+4	; 0x04
    2474:	22 30       	cpi	r18, 0x02	; 2
    2476:	31 05       	cpc	r19, r1
    2478:	a1 f0       	breq	.+40     	; 0x24a2 <EXTI_u8Enable+0x58>
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	c1 f4       	brne	.+48     	; 0x24b2 <EXTI_u8Enable+0x68>
	{
	case EXTI_u8_EXTI_0: SET_BIT(EXTI_u8_GICR_REG,6);break;
    2482:	ab e5       	ldi	r26, 0x5B	; 91
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	eb e5       	ldi	r30, 0x5B	; 91
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	80 64       	ori	r24, 0x40	; 64
    248e:	8c 93       	st	X, r24
    2490:	11 c0       	rjmp	.+34     	; 0x24b4 <EXTI_u8Enable+0x6a>
	case EXTI_u8_EXTI_1: SET_BIT(EXTI_u8_GICR_REG,7);break;
    2492:	ab e5       	ldi	r26, 0x5B	; 91
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	eb e5       	ldi	r30, 0x5B	; 91
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	80 68       	ori	r24, 0x80	; 128
    249e:	8c 93       	st	X, r24
    24a0:	09 c0       	rjmp	.+18     	; 0x24b4 <EXTI_u8Enable+0x6a>
	case EXTI_u8_EXTI_2: SET_BIT(EXTI_u8_GICR_REG,5);break;
    24a2:	ab e5       	ldi	r26, 0x5B	; 91
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	eb e5       	ldi	r30, 0x5B	; 91
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	80 62       	ori	r24, 0x20	; 32
    24ae:	8c 93       	st	X, r24
    24b0:	01 c0       	rjmp	.+2      	; 0x24b4 <EXTI_u8Enable+0x6a>

	default: Local_u8ErrorState=STD_TYPES_NOTOK;
    24b2:	19 82       	std	Y+1, r1	; 0x01
	break;
	}

	return Local_u8ErrorState;
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <EXTI_u8Disable>:

u8 EXTI_u8Disable(EXTINum_enumType COPY_enuEXTI_NUM){
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <EXTI_u8Disable+0x6>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <EXTI_u8Disable+0x8>
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	89 83       	std	Y+1, r24	; 0x01

	switch (COPY_enuEXTI_NUM)
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	3c 83       	std	Y+4, r19	; 0x04
    24de:	2b 83       	std	Y+3, r18	; 0x03
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	81 30       	cpi	r24, 0x01	; 1
    24e6:	91 05       	cpc	r25, r1
    24e8:	89 f0       	breq	.+34     	; 0x250c <EXTI_u8Disable+0x48>
    24ea:	2b 81       	ldd	r18, Y+3	; 0x03
    24ec:	3c 81       	ldd	r19, Y+4	; 0x04
    24ee:	22 30       	cpi	r18, 0x02	; 2
    24f0:	31 05       	cpc	r19, r1
    24f2:	a1 f0       	breq	.+40     	; 0x251c <EXTI_u8Disable+0x58>
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	9c 81       	ldd	r25, Y+4	; 0x04
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	c1 f4       	brne	.+48     	; 0x252c <EXTI_u8Disable+0x68>
	{
	case EXTI_u8_EXTI_0: CLR_BIT(EXTI_u8_GICR_REG,6);break;
    24fc:	ab e5       	ldi	r26, 0x5B	; 91
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	eb e5       	ldi	r30, 0x5B	; 91
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7b       	andi	r24, 0xBF	; 191
    2508:	8c 93       	st	X, r24
    250a:	11 c0       	rjmp	.+34     	; 0x252e <EXTI_u8Disable+0x6a>
	case EXTI_u8_EXTI_1: CLR_BIT(EXTI_u8_GICR_REG,7);break;
    250c:	ab e5       	ldi	r26, 0x5B	; 91
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	eb e5       	ldi	r30, 0x5B	; 91
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	8f 77       	andi	r24, 0x7F	; 127
    2518:	8c 93       	st	X, r24
    251a:	09 c0       	rjmp	.+18     	; 0x252e <EXTI_u8Disable+0x6a>
	case EXTI_u8_EXTI_2: CLR_BIT(EXTI_u8_GICR_REG,5);break;
    251c:	ab e5       	ldi	r26, 0x5B	; 91
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	eb e5       	ldi	r30, 0x5B	; 91
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	8f 7d       	andi	r24, 0xDF	; 223
    2528:	8c 93       	st	X, r24
    252a:	01 c0       	rjmp	.+2      	; 0x252e <EXTI_u8Disable+0x6a>

	default: Local_u8ErrorState=STD_TYPES_NOTOK;
    252c:	19 82       	std	Y+1, r1	; 0x01
	break;
	}

	return Local_u8ErrorState;
    252e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <EXTI_u8SetCallBack>:

u8 EXTI_u8SetCallBack(EXTINum_enumType Copy_enumEXTINum, void(*Copy_PtrToFun)(void)){
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <EXTI_u8SetCallBack+0x6>
    2544:	00 d0       	rcall	.+0      	; 0x2546 <EXTI_u8SetCallBack+0x8>
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	8a 83       	std	Y+2, r24	; 0x02
    254c:	7c 83       	std	Y+4, r23	; 0x04
    254e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =STD_TYPES_OK;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_PtrToFun!=NULL)&&(Copy_enumEXTINum<3)&&(Copy_enumEXTINum>=0)){
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	81 f0       	breq	.+32     	; 0x257c <EXTI_u8SetCallBack+0x3e>
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	83 30       	cpi	r24, 0x03	; 3
    2560:	68 f4       	brcc	.+26     	; 0x257c <EXTI_u8SetCallBack+0x3e>
		/*update global pointer  to functions*/
		EXTI_APtrToFun[Copy_enumEXTINum]=Copy_PtrToFun;
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	88 2f       	mov	r24, r24
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	88 0f       	add	r24, r24
    256a:	99 1f       	adc	r25, r25
    256c:	fc 01       	movw	r30, r24
    256e:	e9 56       	subi	r30, 0x69	; 105
    2570:	fe 4f       	sbci	r31, 0xFE	; 254
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
    257a:	01 c0       	rjmp	.+2      	; 0x257e <EXTI_u8SetCallBack+0x40>
	}else{
		Local_u8ErrorState=STD_TYPES_NOTOK;
    257c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    257e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <__vector_1>:

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    258e:	1f 92       	push	r1
    2590:	0f 92       	push	r0
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	0f 92       	push	r0
    2596:	11 24       	eor	r1, r1
    2598:	2f 93       	push	r18
    259a:	3f 93       	push	r19
    259c:	4f 93       	push	r20
    259e:	5f 93       	push	r21
    25a0:	6f 93       	push	r22
    25a2:	7f 93       	push	r23
    25a4:	8f 93       	push	r24
    25a6:	9f 93       	push	r25
    25a8:	af 93       	push	r26
    25aa:	bf 93       	push	r27
    25ac:	ef 93       	push	r30
    25ae:	ff 93       	push	r31
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APtrToFun[EXTI_u8_EXTI_0]!=NULL){
    25b8:	80 91 97 01 	lds	r24, 0x0197
    25bc:	90 91 98 01 	lds	r25, 0x0198
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	29 f0       	breq	.+10     	; 0x25ce <__vector_1+0x40>
		EXTI_APtrToFun[EXTI_u8_EXTI_0]();
    25c4:	e0 91 97 01 	lds	r30, 0x0197
    25c8:	f0 91 98 01 	lds	r31, 0x0198
    25cc:	09 95       	icall
	}
}
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	ff 91       	pop	r31
    25d4:	ef 91       	pop	r30
    25d6:	bf 91       	pop	r27
    25d8:	af 91       	pop	r26
    25da:	9f 91       	pop	r25
    25dc:	8f 91       	pop	r24
    25de:	7f 91       	pop	r23
    25e0:	6f 91       	pop	r22
    25e2:	5f 91       	pop	r21
    25e4:	4f 91       	pop	r20
    25e6:	3f 91       	pop	r19
    25e8:	2f 91       	pop	r18
    25ea:	0f 90       	pop	r0
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	0f 90       	pop	r0
    25f0:	1f 90       	pop	r1
    25f2:	18 95       	reti

000025f4 <__vector_2>:

void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    25f4:	1f 92       	push	r1
    25f6:	0f 92       	push	r0
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	0f 92       	push	r0
    25fc:	11 24       	eor	r1, r1
    25fe:	2f 93       	push	r18
    2600:	3f 93       	push	r19
    2602:	4f 93       	push	r20
    2604:	5f 93       	push	r21
    2606:	6f 93       	push	r22
    2608:	7f 93       	push	r23
    260a:	8f 93       	push	r24
    260c:	9f 93       	push	r25
    260e:	af 93       	push	r26
    2610:	bf 93       	push	r27
    2612:	ef 93       	push	r30
    2614:	ff 93       	push	r31
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APtrToFun[EXTI_u8_EXTI_1]!=NULL){
    261e:	80 91 99 01 	lds	r24, 0x0199
    2622:	90 91 9a 01 	lds	r25, 0x019A
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	29 f0       	breq	.+10     	; 0x2634 <__vector_2+0x40>
		EXTI_APtrToFun[EXTI_u8_EXTI_1]();
    262a:	e0 91 99 01 	lds	r30, 0x0199
    262e:	f0 91 9a 01 	lds	r31, 0x019A
    2632:	09 95       	icall
	}
}
    2634:	cf 91       	pop	r28
    2636:	df 91       	pop	r29
    2638:	ff 91       	pop	r31
    263a:	ef 91       	pop	r30
    263c:	bf 91       	pop	r27
    263e:	af 91       	pop	r26
    2640:	9f 91       	pop	r25
    2642:	8f 91       	pop	r24
    2644:	7f 91       	pop	r23
    2646:	6f 91       	pop	r22
    2648:	5f 91       	pop	r21
    264a:	4f 91       	pop	r20
    264c:	3f 91       	pop	r19
    264e:	2f 91       	pop	r18
    2650:	0f 90       	pop	r0
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	0f 90       	pop	r0
    2656:	1f 90       	pop	r1
    2658:	18 95       	reti

0000265a <__vector_3>:

void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    265a:	1f 92       	push	r1
    265c:	0f 92       	push	r0
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	0f 92       	push	r0
    2662:	11 24       	eor	r1, r1
    2664:	2f 93       	push	r18
    2666:	3f 93       	push	r19
    2668:	4f 93       	push	r20
    266a:	5f 93       	push	r21
    266c:	6f 93       	push	r22
    266e:	7f 93       	push	r23
    2670:	8f 93       	push	r24
    2672:	9f 93       	push	r25
    2674:	af 93       	push	r26
    2676:	bf 93       	push	r27
    2678:	ef 93       	push	r30
    267a:	ff 93       	push	r31
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APtrToFun[EXTI_u8_EXTI_2]!=NULL){
    2684:	80 91 9b 01 	lds	r24, 0x019B
    2688:	90 91 9c 01 	lds	r25, 0x019C
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	29 f0       	breq	.+10     	; 0x269a <__vector_3+0x40>
		EXTI_APtrToFun[EXTI_u8_EXTI_2]();
    2690:	e0 91 9b 01 	lds	r30, 0x019B
    2694:	f0 91 9c 01 	lds	r31, 0x019C
    2698:	09 95       	icall
	}
}
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	ff 91       	pop	r31
    26a0:	ef 91       	pop	r30
    26a2:	bf 91       	pop	r27
    26a4:	af 91       	pop	r26
    26a6:	9f 91       	pop	r25
    26a8:	8f 91       	pop	r24
    26aa:	7f 91       	pop	r23
    26ac:	6f 91       	pop	r22
    26ae:	5f 91       	pop	r21
    26b0:	4f 91       	pop	r20
    26b2:	3f 91       	pop	r19
    26b4:	2f 91       	pop	r18
    26b6:	0f 90       	pop	r0
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	0f 90       	pop	r0
    26bc:	1f 90       	pop	r1
    26be:	18 95       	reti

000026c0 <GIE_voidEnable>:
#include "C:\Users\KeroEmad\Desktop\imt_july\COTS\4-LibLayer\BIT_MATH.h"


#define GIE_u8_SREG_REG     *((volatile u8*)0x5F)

void GIE_voidEnable(void){
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(GIE_u8_SREG_REG,7);
    26c8:	af e5       	ldi	r26, 0x5F	; 95
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	ef e5       	ldi	r30, 0x5F	; 95
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	80 68       	ori	r24, 0x80	; 128
    26d4:	8c 93       	st	X, r24
}
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <GIE_voidDisable>:
void GIE_voidDisable(void){
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GIE_u8_SREG_REG,7);
    26e4:	af e5       	ldi	r26, 0x5F	; 95
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	ef e5       	ldi	r30, 0x5F	; 95
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	8f 77       	andi	r24, 0x7F	; 127
    26f0:	8c 93       	st	X, r24
}
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"
#include "LCD_interface.h"

void LCD_voidInit(void) //initialize the LCD for 8-bit mode
{
    26f8:	0f 93       	push	r16
    26fa:	1f 93       	push	r17
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	ca 55       	subi	r28, 0x5A	; 90
    2706:	d0 40       	sbci	r29, 0x00	; 0
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	fe 01       	movw	r30, r28
    2714:	e9 5a       	subi	r30, 0xA9	; 169
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	ac e0       	ldi	r26, 0x0C	; 12
    271e:	b2 e4       	ldi	r27, 0x42	; 66
    2720:	80 83       	st	Z, r24
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	a2 83       	std	Z+2, r26	; 0x02
    2726:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2728:	8e 01       	movw	r16, r28
    272a:	0d 5a       	subi	r16, 0xAD	; 173
    272c:	1f 4f       	sbci	r17, 0xFF	; 255
    272e:	fe 01       	movw	r30, r28
    2730:	e9 5a       	subi	r30, 0xA9	; 169
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	60 81       	ld	r22, Z
    2736:	71 81       	ldd	r23, Z+1	; 0x01
    2738:	82 81       	ldd	r24, Z+2	; 0x02
    273a:	93 81       	ldd	r25, Z+3	; 0x03
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	4a ef       	ldi	r20, 0xFA	; 250
    2742:	54 e4       	ldi	r21, 0x44	; 68
    2744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	f8 01       	movw	r30, r16
    274e:	80 83       	st	Z, r24
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	a2 83       	std	Z+2, r26	; 0x02
    2754:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2756:	fe 01       	movw	r30, r28
    2758:	ed 5a       	subi	r30, 0xAD	; 173
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e8       	ldi	r20, 0x80	; 128
    276a:	5f e3       	ldi	r21, 0x3F	; 63
    276c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2770:	88 23       	and	r24, r24
    2772:	44 f4       	brge	.+16     	; 0x2784 <LCD_voidInit+0x8c>
		__ticks = 1;
    2774:	fe 01       	movw	r30, r28
    2776:	ef 5a       	subi	r30, 0xAF	; 175
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	80 83       	st	Z, r24
    2782:	64 c0       	rjmp	.+200    	; 0x284c <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2784:	fe 01       	movw	r30, r28
    2786:	ed 5a       	subi	r30, 0xAD	; 173
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	60 81       	ld	r22, Z
    278c:	71 81       	ldd	r23, Z+1	; 0x01
    278e:	82 81       	ldd	r24, Z+2	; 0x02
    2790:	93 81       	ldd	r25, Z+3	; 0x03
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	3f ef       	ldi	r19, 0xFF	; 255
    2796:	4f e7       	ldi	r20, 0x7F	; 127
    2798:	57 e4       	ldi	r21, 0x47	; 71
    279a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    279e:	18 16       	cp	r1, r24
    27a0:	0c f0       	brlt	.+2      	; 0x27a4 <LCD_voidInit+0xac>
    27a2:	43 c0       	rjmp	.+134    	; 0x282a <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a4:	fe 01       	movw	r30, r28
    27a6:	e9 5a       	subi	r30, 0xA9	; 169
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e2       	ldi	r20, 0x20	; 32
    27b8:	51 e4       	ldi	r21, 0x41	; 65
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	8e 01       	movw	r16, r28
    27c4:	0f 5a       	subi	r16, 0xAF	; 175
    27c6:	1f 4f       	sbci	r17, 0xFF	; 255
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	f8 01       	movw	r30, r16
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	80 83       	st	Z, r24
    27da:	1f c0       	rjmp	.+62     	; 0x281a <LCD_voidInit+0x122>
    27dc:	fe 01       	movw	r30, r28
    27de:	e1 5b       	subi	r30, 0xB1	; 177
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	88 ec       	ldi	r24, 0xC8	; 200
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
    27ea:	fe 01       	movw	r30, r28
    27ec:	e1 5b       	subi	r30, 0xB1	; 177
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	91 81       	ldd	r25, Z+1	; 0x01
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <LCD_voidInit+0xfc>
    27f8:	fe 01       	movw	r30, r28
    27fa:	e1 5b       	subi	r30, 0xB1	; 177
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2802:	de 01       	movw	r26, r28
    2804:	af 5a       	subi	r26, 0xAF	; 175
    2806:	bf 4f       	sbci	r27, 0xFF	; 255
    2808:	fe 01       	movw	r30, r28
    280a:	ef 5a       	subi	r30, 0xAF	; 175
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	80 81       	ld	r24, Z
    2810:	91 81       	ldd	r25, Z+1	; 0x01
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	11 96       	adiw	r26, 0x01	; 1
    2816:	9c 93       	st	X, r25
    2818:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	fe 01       	movw	r30, r28
    281c:	ef 5a       	subi	r30, 0xAF	; 175
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	80 81       	ld	r24, Z
    2822:	91 81       	ldd	r25, Z+1	; 0x01
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	d1 f6       	brne	.-76     	; 0x27dc <LCD_voidInit+0xe4>
    2828:	27 c0       	rjmp	.+78     	; 0x2878 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282a:	8e 01       	movw	r16, r28
    282c:	0f 5a       	subi	r16, 0xAF	; 175
    282e:	1f 4f       	sbci	r17, 0xFF	; 255
    2830:	fe 01       	movw	r30, r28
    2832:	ed 5a       	subi	r30, 0xAD	; 173
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	f8 01       	movw	r30, r16
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	80 83       	st	Z, r24
    284c:	de 01       	movw	r26, r28
    284e:	a3 5b       	subi	r26, 0xB3	; 179
    2850:	bf 4f       	sbci	r27, 0xFF	; 255
    2852:	fe 01       	movw	r30, r28
    2854:	ef 5a       	subi	r30, 0xAF	; 175
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	8d 93       	st	X+, r24
    285e:	9c 93       	st	X, r25
    2860:	fe 01       	movw	r30, r28
    2862:	e3 5b       	subi	r30, 0xB3	; 179
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 81       	ld	r24, Z
    2868:	91 81       	ldd	r25, Z+1	; 0x01
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <LCD_voidInit+0x172>
    286e:	fe 01       	movw	r30, r28
    2870:	e3 5b       	subi	r30, 0xB3	; 179
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	80 83       	st	Z, r24
	LCD_voidWriteCommand(LCD_FunctionSet8bit);

#elif (LCD_u8_4BIT_MODE==LCD_u8_MODE)
	/*send first step of function set command*/
	//1-Rs =0  	select Data Register
	DIO_u8SetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    2878:	83 e0       	ldi	r24, 0x03	; 3
    287a:	64 e0       	ldi	r22, 0x04	; 4
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>

	//Rw =0 	Write Operation
	DIO_u8SetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    2882:	83 e0       	ldi	r24, 0x03	; 3
    2884:	65 e0       	ldi	r22, 0x05	; 5
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
	//3-Send 4_MSB Data byte to LCD
//	DIO_u8SetPortValue(LCD_u8_DATA_PORT, 0b00100000);
	PRIVATE_voidSetHalfPort(0b00100000);
    288c:	80 e2       	ldi	r24, 0x20	; 32
    288e:	0e 94 3f 1a 	call	0x347e	; 0x347e <PRIVATE_voidSetHalfPort>
	//4-enable
	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_HIGH);
    2892:	83 e0       	ldi	r24, 0x03	; 3
    2894:	66 e0       	ldi	r22, 0x06	; 6
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
    289c:	fe 01       	movw	r30, r28
    289e:	e7 5b       	subi	r30, 0xB7	; 183
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	a0 e0       	ldi	r26, 0x00	; 0
    28a8:	b0 e4       	ldi	r27, 0x40	; 64
    28aa:	80 83       	st	Z, r24
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	a2 83       	std	Z+2, r26	; 0x02
    28b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b2:	8e 01       	movw	r16, r28
    28b4:	0b 5b       	subi	r16, 0xBB	; 187
    28b6:	1f 4f       	sbci	r17, 0xFF	; 255
    28b8:	fe 01       	movw	r30, r28
    28ba:	e7 5b       	subi	r30, 0xB7	; 183
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	60 81       	ld	r22, Z
    28c0:	71 81       	ldd	r23, Z+1	; 0x01
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	4a ef       	ldi	r20, 0xFA	; 250
    28cc:	54 e4       	ldi	r21, 0x44	; 68
    28ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	f8 01       	movw	r30, r16
    28d8:	80 83       	st	Z, r24
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	a2 83       	std	Z+2, r26	; 0x02
    28de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28e0:	fe 01       	movw	r30, r28
    28e2:	eb 5b       	subi	r30, 0xBB	; 187
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	82 81       	ldd	r24, Z+2	; 0x02
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e8       	ldi	r20, 0x80	; 128
    28f4:	5f e3       	ldi	r21, 0x3F	; 63
    28f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28fa:	88 23       	and	r24, r24
    28fc:	44 f4       	brge	.+16     	; 0x290e <LCD_voidInit+0x216>
		__ticks = 1;
    28fe:	fe 01       	movw	r30, r28
    2900:	ed 5b       	subi	r30, 0xBD	; 189
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	80 83       	st	Z, r24
    290c:	64 c0       	rjmp	.+200    	; 0x29d6 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    290e:	fe 01       	movw	r30, r28
    2910:	eb 5b       	subi	r30, 0xBB	; 187
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	60 81       	ld	r22, Z
    2916:	71 81       	ldd	r23, Z+1	; 0x01
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	3f ef       	ldi	r19, 0xFF	; 255
    2920:	4f e7       	ldi	r20, 0x7F	; 127
    2922:	57 e4       	ldi	r21, 0x47	; 71
    2924:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2928:	18 16       	cp	r1, r24
    292a:	0c f0       	brlt	.+2      	; 0x292e <LCD_voidInit+0x236>
    292c:	43 c0       	rjmp	.+134    	; 0x29b4 <LCD_voidInit+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292e:	fe 01       	movw	r30, r28
    2930:	e7 5b       	subi	r30, 0xB7	; 183
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e2       	ldi	r20, 0x20	; 32
    2942:	51 e4       	ldi	r21, 0x41	; 65
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	8e 01       	movw	r16, r28
    294e:	0d 5b       	subi	r16, 0xBD	; 189
    2950:	1f 4f       	sbci	r17, 0xFF	; 255
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	f8 01       	movw	r30, r16
    2960:	91 83       	std	Z+1, r25	; 0x01
    2962:	80 83       	st	Z, r24
    2964:	1f c0       	rjmp	.+62     	; 0x29a4 <LCD_voidInit+0x2ac>
    2966:	fe 01       	movw	r30, r28
    2968:	ef 5b       	subi	r30, 0xBF	; 191
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	88 ec       	ldi	r24, 0xC8	; 200
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	91 83       	std	Z+1, r25	; 0x01
    2972:	80 83       	st	Z, r24
    2974:	fe 01       	movw	r30, r28
    2976:	ef 5b       	subi	r30, 0xBF	; 191
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	80 81       	ld	r24, Z
    297c:	91 81       	ldd	r25, Z+1	; 0x01
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <LCD_voidInit+0x286>
    2982:	fe 01       	movw	r30, r28
    2984:	ef 5b       	subi	r30, 0xBF	; 191
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298c:	de 01       	movw	r26, r28
    298e:	ad 5b       	subi	r26, 0xBD	; 189
    2990:	bf 4f       	sbci	r27, 0xFF	; 255
    2992:	fe 01       	movw	r30, r28
    2994:	ed 5b       	subi	r30, 0xBD	; 189
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	11 96       	adiw	r26, 0x01	; 1
    29a0:	9c 93       	st	X, r25
    29a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a4:	fe 01       	movw	r30, r28
    29a6:	ed 5b       	subi	r30, 0xBD	; 189
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 81       	ld	r24, Z
    29ac:	91 81       	ldd	r25, Z+1	; 0x01
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	d1 f6       	brne	.-76     	; 0x2966 <LCD_voidInit+0x26e>
    29b2:	24 c0       	rjmp	.+72     	; 0x29fc <LCD_voidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b4:	8e 01       	movw	r16, r28
    29b6:	0d 5b       	subi	r16, 0xBD	; 189
    29b8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ba:	fe 01       	movw	r30, r28
    29bc:	eb 5b       	subi	r30, 0xBB	; 187
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	f8 01       	movw	r30, r16
    29d2:	91 83       	std	Z+1, r25	; 0x01
    29d4:	80 83       	st	Z, r24
    29d6:	fe 01       	movw	r30, r28
    29d8:	ed 5b       	subi	r30, 0xBD	; 189
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	80 81       	ld	r24, Z
    29de:	91 81       	ldd	r25, Z+1	; 0x01
    29e0:	fe 01       	movw	r30, r28
    29e2:	ff 96       	adiw	r30, 0x3f	; 63
    29e4:	91 83       	std	Z+1, r25	; 0x01
    29e6:	80 83       	st	Z, r24
    29e8:	fe 01       	movw	r30, r28
    29ea:	ff 96       	adiw	r30, 0x3f	; 63
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <LCD_voidInit+0x2f8>
    29f4:	fe 01       	movw	r30, r28
    29f6:	ff 96       	adiw	r30, 0x3f	; 63
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_LOW);
    29fc:	83 e0       	ldi	r24, 0x03	; 3
    29fe:	66 e0       	ldi	r22, 0x06	; 6
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	a0 e2       	ldi	r26, 0x20	; 32
    2a0c:	b2 e4       	ldi	r27, 0x42	; 66
    2a0e:	8b af       	std	Y+59, r24	; 0x3b
    2a10:	9c af       	std	Y+60, r25	; 0x3c
    2a12:	ad af       	std	Y+61, r26	; 0x3d
    2a14:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a16:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a18:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a1e:	2b ea       	ldi	r18, 0xAB	; 171
    2a20:	3a ea       	ldi	r19, 0xAA	; 170
    2a22:	4a e2       	ldi	r20, 0x2A	; 42
    2a24:	50 e4       	ldi	r21, 0x40	; 64
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	8f ab       	std	Y+55, r24	; 0x37
    2a30:	98 af       	std	Y+56, r25	; 0x38
    2a32:	a9 af       	std	Y+57, r26	; 0x39
    2a34:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2a36:	6f a9       	ldd	r22, Y+55	; 0x37
    2a38:	78 ad       	ldd	r23, Y+56	; 0x38
    2a3a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a3c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e8       	ldi	r20, 0x80	; 128
    2a44:	5f e3       	ldi	r21, 0x3F	; 63
    2a46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a4a:	88 23       	and	r24, r24
    2a4c:	1c f4       	brge	.+6      	; 0x2a54 <LCD_voidInit+0x35c>
		__ticks = 1;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	8e ab       	std	Y+54, r24	; 0x36
    2a52:	91 c0       	rjmp	.+290    	; 0x2b76 <LCD_voidInit+0x47e>
	else if (__tmp > 255)
    2a54:	6f a9       	ldd	r22, Y+55	; 0x37
    2a56:	78 ad       	ldd	r23, Y+56	; 0x38
    2a58:	89 ad       	ldd	r24, Y+57	; 0x39
    2a5a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4f e7       	ldi	r20, 0x7F	; 127
    2a62:	53 e4       	ldi	r21, 0x43	; 67
    2a64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a68:	18 16       	cp	r1, r24
    2a6a:	0c f0       	brlt	.+2      	; 0x2a6e <LCD_voidInit+0x376>
    2a6c:	7b c0       	rjmp	.+246    	; 0x2b64 <LCD_voidInit+0x46c>
	{
		_delay_ms(__us / 1000.0);
    2a6e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a70:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a72:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a74:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	4a e7       	ldi	r20, 0x7A	; 122
    2a7c:	54 e4       	ldi	r21, 0x44	; 68
    2a7e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	8a ab       	std	Y+50, r24	; 0x32
    2a88:	9b ab       	std	Y+51, r25	; 0x33
    2a8a:	ac ab       	std	Y+52, r26	; 0x34
    2a8c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8e:	6a a9       	ldd	r22, Y+50	; 0x32
    2a90:	7b a9       	ldd	r23, Y+51	; 0x33
    2a92:	8c a9       	ldd	r24, Y+52	; 0x34
    2a94:	9d a9       	ldd	r25, Y+53	; 0x35
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4a ef       	ldi	r20, 0xFA	; 250
    2a9c:	54 e4       	ldi	r21, 0x44	; 68
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	8e a7       	std	Y+46, r24	; 0x2e
    2aa8:	9f a7       	std	Y+47, r25	; 0x2f
    2aaa:	a8 ab       	std	Y+48, r26	; 0x30
    2aac:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2aae:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ab0:	7f a5       	ldd	r23, Y+47	; 0x2f
    2ab2:	88 a9       	ldd	r24, Y+48	; 0x30
    2ab4:	99 a9       	ldd	r25, Y+49	; 0x31
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	2c f4       	brge	.+10     	; 0x2ad0 <LCD_voidInit+0x3d8>
		__ticks = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9d a7       	std	Y+45, r25	; 0x2d
    2acc:	8c a7       	std	Y+44, r24	; 0x2c
    2ace:	3f c0       	rjmp	.+126    	; 0x2b4e <LCD_voidInit+0x456>
	else if (__tmp > 65535)
    2ad0:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ad2:	7f a5       	ldd	r23, Y+47	; 0x2f
    2ad4:	88 a9       	ldd	r24, Y+48	; 0x30
    2ad6:	99 a9       	ldd	r25, Y+49	; 0x31
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    2adc:	4f e7       	ldi	r20, 0x7F	; 127
    2ade:	57 e4       	ldi	r21, 0x47	; 71
    2ae0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ae4:	18 16       	cp	r1, r24
    2ae6:	4c f5       	brge	.+82     	; 0x2b3a <LCD_voidInit+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae8:	6a a9       	ldd	r22, Y+50	; 0x32
    2aea:	7b a9       	ldd	r23, Y+51	; 0x33
    2aec:	8c a9       	ldd	r24, Y+52	; 0x34
    2aee:	9d a9       	ldd	r25, Y+53	; 0x35
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	40 e2       	ldi	r20, 0x20	; 32
    2af6:	51 e4       	ldi	r21, 0x41	; 65
    2af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	9d a7       	std	Y+45, r25	; 0x2d
    2b0e:	8c a7       	std	Y+44, r24	; 0x2c
    2b10:	0f c0       	rjmp	.+30     	; 0x2b30 <LCD_voidInit+0x438>
    2b12:	88 ec       	ldi	r24, 0xC8	; 200
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9b a7       	std	Y+43, r25	; 0x2b
    2b18:	8a a7       	std	Y+42, r24	; 0x2a
    2b1a:	8a a5       	ldd	r24, Y+42	; 0x2a
    2b1c:	9b a5       	ldd	r25, Y+43	; 0x2b
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <LCD_voidInit+0x426>
    2b22:	9b a7       	std	Y+43, r25	; 0x2b
    2b24:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b28:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9d a7       	std	Y+45, r25	; 0x2d
    2b2e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b30:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b32:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	69 f7       	brne	.-38     	; 0x2b12 <LCD_voidInit+0x41a>
    2b38:	24 c0       	rjmp	.+72     	; 0x2b82 <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3a:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b3c:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b3e:	88 a9       	ldd	r24, Y+48	; 0x30
    2b40:	99 a9       	ldd	r25, Y+49	; 0x31
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9d a7       	std	Y+45, r25	; 0x2d
    2b4c:	8c a7       	std	Y+44, r24	; 0x2c
    2b4e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b50:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b52:	99 a7       	std	Y+41, r25	; 0x29
    2b54:	88 a7       	std	Y+40, r24	; 0x28
    2b56:	88 a5       	ldd	r24, Y+40	; 0x28
    2b58:	99 a5       	ldd	r25, Y+41	; 0x29
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <LCD_voidInit+0x462>
    2b5e:	99 a7       	std	Y+41, r25	; 0x29
    2b60:	88 a7       	std	Y+40, r24	; 0x28
    2b62:	0f c0       	rjmp	.+30     	; 0x2b82 <LCD_voidInit+0x48a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b64:	6f a9       	ldd	r22, Y+55	; 0x37
    2b66:	78 ad       	ldd	r23, Y+56	; 0x38
    2b68:	89 ad       	ldd	r24, Y+57	; 0x39
    2b6a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	8e ab       	std	Y+54, r24	; 0x36
    2b76:	8e a9       	ldd	r24, Y+54	; 0x36
    2b78:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b7a:	8f a1       	ldd	r24, Y+39	; 0x27
    2b7c:	8a 95       	dec	r24
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <LCD_voidInit+0x484>
    2b80:	8f a3       	std	Y+39, r24	; 0x27
#else
#error "wrong choice"
#endif
	_delay_us(40);
	/* Display on off Control */
	LCD_voidWriteCommand(LCD_Disp_Curser_Bl);
    2b82:	8f e0       	ldi	r24, 0x0F	; 15
    2b84:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_voidWriteCommand>
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	a0 e2       	ldi	r26, 0x20	; 32
    2b8e:	b2 e4       	ldi	r27, 0x42	; 66
    2b90:	8b a3       	std	Y+35, r24	; 0x23
    2b92:	9c a3       	std	Y+36, r25	; 0x24
    2b94:	ad a3       	std	Y+37, r26	; 0x25
    2b96:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b98:	6b a1       	ldd	r22, Y+35	; 0x23
    2b9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba0:	2b ea       	ldi	r18, 0xAB	; 171
    2ba2:	3a ea       	ldi	r19, 0xAA	; 170
    2ba4:	4a e2       	ldi	r20, 0x2A	; 42
    2ba6:	50 e4       	ldi	r21, 0x40	; 64
    2ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	8f 8f       	std	Y+31, r24	; 0x1f
    2bb2:	98 a3       	std	Y+32, r25	; 0x20
    2bb4:	a9 a3       	std	Y+33, r26	; 0x21
    2bb6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2bb8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bba:	78 a1       	ldd	r23, Y+32	; 0x20
    2bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e8       	ldi	r20, 0x80	; 128
    2bc6:	5f e3       	ldi	r21, 0x3F	; 63
    2bc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bcc:	88 23       	and	r24, r24
    2bce:	1c f4       	brge	.+6      	; 0x2bd6 <LCD_voidInit+0x4de>
		__ticks = 1;
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	8e 8f       	std	Y+30, r24	; 0x1e
    2bd4:	91 c0       	rjmp	.+290    	; 0x2cf8 <LCD_voidInit+0x600>
	else if (__tmp > 255)
    2bd6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bd8:	78 a1       	ldd	r23, Y+32	; 0x20
    2bda:	89 a1       	ldd	r24, Y+33	; 0x21
    2bdc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4f e7       	ldi	r20, 0x7F	; 127
    2be4:	53 e4       	ldi	r21, 0x43	; 67
    2be6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bea:	18 16       	cp	r1, r24
    2bec:	0c f0       	brlt	.+2      	; 0x2bf0 <LCD_voidInit+0x4f8>
    2bee:	7b c0       	rjmp	.+246    	; 0x2ce6 <LCD_voidInit+0x5ee>
	{
		_delay_ms(__us / 1000.0);
    2bf0:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf2:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf4:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf6:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	4a e7       	ldi	r20, 0x7A	; 122
    2bfe:	54 e4       	ldi	r21, 0x44	; 68
    2c00:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	8a 8f       	std	Y+26, r24	; 0x1a
    2c0a:	9b 8f       	std	Y+27, r25	; 0x1b
    2c0c:	ac 8f       	std	Y+28, r26	; 0x1c
    2c0e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c10:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c12:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c14:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c16:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	4a ef       	ldi	r20, 0xFA	; 250
    2c1e:	54 e4       	ldi	r21, 0x44	; 68
    2c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	8e 8b       	std	Y+22, r24	; 0x16
    2c2a:	9f 8b       	std	Y+23, r25	; 0x17
    2c2c:	a8 8f       	std	Y+24, r26	; 0x18
    2c2e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2c30:	6e 89       	ldd	r22, Y+22	; 0x16
    2c32:	7f 89       	ldd	r23, Y+23	; 0x17
    2c34:	88 8d       	ldd	r24, Y+24	; 0x18
    2c36:	99 8d       	ldd	r25, Y+25	; 0x19
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e8       	ldi	r20, 0x80	; 128
    2c3e:	5f e3       	ldi	r21, 0x3F	; 63
    2c40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c44:	88 23       	and	r24, r24
    2c46:	2c f4       	brge	.+10     	; 0x2c52 <LCD_voidInit+0x55a>
		__ticks = 1;
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	9d 8b       	std	Y+21, r25	; 0x15
    2c4e:	8c 8b       	std	Y+20, r24	; 0x14
    2c50:	3f c0       	rjmp	.+126    	; 0x2cd0 <LCD_voidInit+0x5d8>
	else if (__tmp > 65535)
    2c52:	6e 89       	ldd	r22, Y+22	; 0x16
    2c54:	7f 89       	ldd	r23, Y+23	; 0x17
    2c56:	88 8d       	ldd	r24, Y+24	; 0x18
    2c58:	99 8d       	ldd	r25, Y+25	; 0x19
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	3f ef       	ldi	r19, 0xFF	; 255
    2c5e:	4f e7       	ldi	r20, 0x7F	; 127
    2c60:	57 e4       	ldi	r21, 0x47	; 71
    2c62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c66:	18 16       	cp	r1, r24
    2c68:	4c f5       	brge	.+82     	; 0x2cbc <LCD_voidInit+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c6c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c6e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c70:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e2       	ldi	r20, 0x20	; 32
    2c78:	51 e4       	ldi	r21, 0x41	; 65
    2c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	bc 01       	movw	r22, r24
    2c84:	cd 01       	movw	r24, r26
    2c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	9d 8b       	std	Y+21, r25	; 0x15
    2c90:	8c 8b       	std	Y+20, r24	; 0x14
    2c92:	0f c0       	rjmp	.+30     	; 0x2cb2 <LCD_voidInit+0x5ba>
    2c94:	88 ec       	ldi	r24, 0xC8	; 200
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9b 8b       	std	Y+19, r25	; 0x13
    2c9a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c9c:	8a 89       	ldd	r24, Y+18	; 0x12
    2c9e:	9b 89       	ldd	r25, Y+19	; 0x13
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	f1 f7       	brne	.-4      	; 0x2ca0 <LCD_voidInit+0x5a8>
    2ca4:	9b 8b       	std	Y+19, r25	; 0x13
    2ca6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca8:	8c 89       	ldd	r24, Y+20	; 0x14
    2caa:	9d 89       	ldd	r25, Y+21	; 0x15
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	9d 8b       	std	Y+21, r25	; 0x15
    2cb0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb2:	8c 89       	ldd	r24, Y+20	; 0x14
    2cb4:	9d 89       	ldd	r25, Y+21	; 0x15
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	69 f7       	brne	.-38     	; 0x2c94 <LCD_voidInit+0x59c>
    2cba:	24 c0       	rjmp	.+72     	; 0x2d04 <LCD_voidInit+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbc:	6e 89       	ldd	r22, Y+22	; 0x16
    2cbe:	7f 89       	ldd	r23, Y+23	; 0x17
    2cc0:	88 8d       	ldd	r24, Y+24	; 0x18
    2cc2:	99 8d       	ldd	r25, Y+25	; 0x19
    2cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	9d 8b       	std	Y+21, r25	; 0x15
    2cce:	8c 8b       	std	Y+20, r24	; 0x14
    2cd0:	8c 89       	ldd	r24, Y+20	; 0x14
    2cd2:	9d 89       	ldd	r25, Y+21	; 0x15
    2cd4:	99 8b       	std	Y+17, r25	; 0x11
    2cd6:	88 8b       	std	Y+16, r24	; 0x10
    2cd8:	88 89       	ldd	r24, Y+16	; 0x10
    2cda:	99 89       	ldd	r25, Y+17	; 0x11
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <LCD_voidInit+0x5e4>
    2ce0:	99 8b       	std	Y+17, r25	; 0x11
    2ce2:	88 8b       	std	Y+16, r24	; 0x10
    2ce4:	0f c0       	rjmp	.+30     	; 0x2d04 <LCD_voidInit+0x60c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ce6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ce8:	78 a1       	ldd	r23, Y+32	; 0x20
    2cea:	89 a1       	ldd	r24, Y+33	; 0x21
    2cec:	9a a1       	ldd	r25, Y+34	; 0x22
    2cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	8e 8f       	std	Y+30, r24	; 0x1e
    2cf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cfa:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cfe:	8a 95       	dec	r24
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <LCD_voidInit+0x606>
    2d02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/* Display Clear */
	LCD_voidWriteCommand(LCD_Clear);
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_voidWriteCommand>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a0 e0       	ldi	r26, 0x00	; 0
    2d10:	b0 e4       	ldi	r27, 0x40	; 64
    2d12:	8b 87       	std	Y+11, r24	; 0x0b
    2d14:	9c 87       	std	Y+12, r25	; 0x0c
    2d16:	ad 87       	std	Y+13, r26	; 0x0d
    2d18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	4a ef       	ldi	r20, 0xFA	; 250
    2d28:	54 e4       	ldi	r21, 0x44	; 68
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8f 83       	std	Y+7, r24	; 0x07
    2d34:	98 87       	std	Y+8, r25	; 0x08
    2d36:	a9 87       	std	Y+9, r26	; 0x09
    2d38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3c:	78 85       	ldd	r23, Y+8	; 0x08
    2d3e:	89 85       	ldd	r24, Y+9	; 0x09
    2d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e8       	ldi	r20, 0x80	; 128
    2d48:	5f e3       	ldi	r21, 0x3F	; 63
    2d4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d4e:	88 23       	and	r24, r24
    2d50:	2c f4       	brge	.+10     	; 0x2d5c <LCD_voidInit+0x664>
		__ticks = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9e 83       	std	Y+6, r25	; 0x06
    2d58:	8d 83       	std	Y+5, r24	; 0x05
    2d5a:	3f c0       	rjmp	.+126    	; 0x2dda <LCD_voidInit+0x6e2>
	else if (__tmp > 65535)
    2d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5e:	78 85       	ldd	r23, Y+8	; 0x08
    2d60:	89 85       	ldd	r24, Y+9	; 0x09
    2d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	3f ef       	ldi	r19, 0xFF	; 255
    2d68:	4f e7       	ldi	r20, 0x7F	; 127
    2d6a:	57 e4       	ldi	r21, 0x47	; 71
    2d6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d70:	18 16       	cp	r1, r24
    2d72:	4c f5       	brge	.+82     	; 0x2dc6 <LCD_voidInit+0x6ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e2       	ldi	r20, 0x20	; 32
    2d82:	51 e4       	ldi	r21, 0x41	; 65
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9e 83       	std	Y+6, r25	; 0x06
    2d9a:	8d 83       	std	Y+5, r24	; 0x05
    2d9c:	0f c0       	rjmp	.+30     	; 0x2dbc <LCD_voidInit+0x6c4>
    2d9e:	88 ec       	ldi	r24, 0xC8	; 200
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	9c 83       	std	Y+4, r25	; 0x04
    2da4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	9c 81       	ldd	r25, Y+4	; 0x04
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <LCD_voidInit+0x6b2>
    2dae:	9c 83       	std	Y+4, r25	; 0x04
    2db0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db2:	8d 81       	ldd	r24, Y+5	; 0x05
    2db4:	9e 81       	ldd	r25, Y+6	; 0x06
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	9e 83       	std	Y+6, r25	; 0x06
    2dba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	69 f7       	brne	.-38     	; 0x2d9e <LCD_voidInit+0x6a6>
    2dc4:	14 c0       	rjmp	.+40     	; 0x2dee <LCD_voidInit+0x6f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	78 85       	ldd	r23, Y+8	; 0x08
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
    2dda:	8d 81       	ldd	r24, Y+5	; 0x05
    2ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dde:	9a 83       	std	Y+2, r25	; 0x02
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	9a 81       	ldd	r25, Y+2	; 0x02
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <LCD_voidInit+0x6ee>
    2dea:	9a 83       	std	Y+2, r25	; 0x02
    2dec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* Entry Mode Set */
	LCD_voidWriteCommand(LCD_EntryMode);
    2dee:	86 e0       	ldi	r24, 0x06	; 6
    2df0:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_voidWriteCommand>
}
    2df4:	c6 5a       	subi	r28, 0xA6	; 166
    2df6:	df 4f       	sbci	r29, 0xFF	; 255
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	08 95       	ret

00002e0c <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 Copy_u8Char) {
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	6d 97       	sbiw	r28, 0x1d	; 29
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_LOW);

#elif (LCD_u8_4BIT_MODE==LCD_u8_MODE)
	//1-Rs =1  	select Data Register
	DIO_u8SetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    2e22:	83 e0       	ldi	r24, 0x03	; 3
    2e24:	64 e0       	ldi	r22, 0x04	; 4
    2e26:	41 e0       	ldi	r20, 0x01	; 1
    2e28:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>

	//Rw =0 	Write Operation
	DIO_u8SetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    2e2c:	83 e0       	ldi	r24, 0x03	; 3
    2e2e:	65 e0       	ldi	r22, 0x05	; 5
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
	//3-Send 4_MSB Data byte to LCD
	//DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Char);
	PRIVATE_voidSetHalfPort(Copy_u8Char);
    2e36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e38:	0e 94 3f 1a 	call	0x347e	; 0x347e <PRIVATE_voidSetHalfPort>
	//4-Enable
	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_HIGH);
    2e3c:	83 e0       	ldi	r24, 0x03	; 3
    2e3e:	66 e0       	ldi	r22, 0x06	; 6
    2e40:	41 e0       	ldi	r20, 0x01	; 1
    2e42:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	a0 e0       	ldi	r26, 0x00	; 0
    2e4c:	b0 e4       	ldi	r27, 0x40	; 64
    2e4e:	89 8f       	std	Y+25, r24	; 0x19
    2e50:	9a 8f       	std	Y+26, r25	; 0x1a
    2e52:	ab 8f       	std	Y+27, r26	; 0x1b
    2e54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e56:	69 8d       	ldd	r22, Y+25	; 0x19
    2e58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	4a ef       	ldi	r20, 0xFA	; 250
    2e64:	54 e4       	ldi	r21, 0x44	; 68
    2e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	8d 8b       	std	Y+21, r24	; 0x15
    2e70:	9e 8b       	std	Y+22, r25	; 0x16
    2e72:	af 8b       	std	Y+23, r26	; 0x17
    2e74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e76:	6d 89       	ldd	r22, Y+21	; 0x15
    2e78:	7e 89       	ldd	r23, Y+22	; 0x16
    2e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e8       	ldi	r20, 0x80	; 128
    2e84:	5f e3       	ldi	r21, 0x3F	; 63
    2e86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e8a:	88 23       	and	r24, r24
    2e8c:	2c f4       	brge	.+10     	; 0x2e98 <LCD_voidWriteChar+0x8c>
		__ticks = 1;
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	9c 8b       	std	Y+20, r25	; 0x14
    2e94:	8b 8b       	std	Y+19, r24	; 0x13
    2e96:	3f c0       	rjmp	.+126    	; 0x2f16 <LCD_voidWriteChar+0x10a>
	else if (__tmp > 65535)
    2e98:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	3f ef       	ldi	r19, 0xFF	; 255
    2ea4:	4f e7       	ldi	r20, 0x7F	; 127
    2ea6:	57 e4       	ldi	r21, 0x47	; 71
    2ea8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eac:	18 16       	cp	r1, r24
    2eae:	4c f5       	brge	.+82     	; 0x2f02 <LCD_voidWriteChar+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb0:	69 8d       	ldd	r22, Y+25	; 0x19
    2eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e2       	ldi	r20, 0x20	; 32
    2ebe:	51 e4       	ldi	r21, 0x41	; 65
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9c 8b       	std	Y+20, r25	; 0x14
    2ed6:	8b 8b       	std	Y+19, r24	; 0x13
    2ed8:	0f c0       	rjmp	.+30     	; 0x2ef8 <LCD_voidWriteChar+0xec>
    2eda:	88 ec       	ldi	r24, 0xC8	; 200
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	9a 8b       	std	Y+18, r25	; 0x12
    2ee0:	89 8b       	std	Y+17, r24	; 0x11
    2ee2:	89 89       	ldd	r24, Y+17	; 0x11
    2ee4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <LCD_voidWriteChar+0xda>
    2eea:	9a 8b       	std	Y+18, r25	; 0x12
    2eec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	9c 8b       	std	Y+20, r25	; 0x14
    2ef6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    2efa:	9c 89       	ldd	r25, Y+20	; 0x14
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	69 f7       	brne	.-38     	; 0x2eda <LCD_voidWriteChar+0xce>
    2f00:	14 c0       	rjmp	.+40     	; 0x2f2a <LCD_voidWriteChar+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f02:	6d 89       	ldd	r22, Y+21	; 0x15
    2f04:	7e 89       	ldd	r23, Y+22	; 0x16
    2f06:	8f 89       	ldd	r24, Y+23	; 0x17
    2f08:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	9c 8b       	std	Y+20, r25	; 0x14
    2f14:	8b 8b       	std	Y+19, r24	; 0x13
    2f16:	8b 89       	ldd	r24, Y+19	; 0x13
    2f18:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1a:	98 8b       	std	Y+16, r25	; 0x10
    2f1c:	8f 87       	std	Y+15, r24	; 0x0f
    2f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f20:	98 89       	ldd	r25, Y+16	; 0x10
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <LCD_voidWriteChar+0x116>
    2f26:	98 8b       	std	Y+16, r25	; 0x10
    2f28:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_LOW);
    2f2a:	83 e0       	ldi	r24, 0x03	; 3
    2f2c:	66 e0       	ldi	r22, 0x06	; 6
    2f2e:	40 e0       	ldi	r20, 0x00	; 0
    2f30:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>

	//3-Send 4_LSB Data byte to LCD
	//DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Char << 4);
	PRIVATE_voidSetHalfPort(Copy_u8Char<<4);
    2f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f36:	82 95       	swap	r24
    2f38:	80 7f       	andi	r24, 0xF0	; 240
    2f3a:	0e 94 3f 1a 	call	0x347e	; 0x347e <PRIVATE_voidSetHalfPort>
	//4-Enable
	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_HIGH);
    2f3e:	83 e0       	ldi	r24, 0x03	; 3
    2f40:	66 e0       	ldi	r22, 0x06	; 6
    2f42:	41 e0       	ldi	r20, 0x01	; 1
    2f44:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	a0 e0       	ldi	r26, 0x00	; 0
    2f4e:	b0 e4       	ldi	r27, 0x40	; 64
    2f50:	8b 87       	std	Y+11, r24	; 0x0b
    2f52:	9c 87       	std	Y+12, r25	; 0x0c
    2f54:	ad 87       	std	Y+13, r26	; 0x0d
    2f56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a ef       	ldi	r20, 0xFA	; 250
    2f66:	54 e4       	ldi	r21, 0x44	; 68
    2f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	8f 83       	std	Y+7, r24	; 0x07
    2f72:	98 87       	std	Y+8, r25	; 0x08
    2f74:	a9 87       	std	Y+9, r26	; 0x09
    2f76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f78:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7a:	78 85       	ldd	r23, Y+8	; 0x08
    2f7c:	89 85       	ldd	r24, Y+9	; 0x09
    2f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e8       	ldi	r20, 0x80	; 128
    2f86:	5f e3       	ldi	r21, 0x3F	; 63
    2f88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f8c:	88 23       	and	r24, r24
    2f8e:	2c f4       	brge	.+10     	; 0x2f9a <LCD_voidWriteChar+0x18e>
		__ticks = 1;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9e 83       	std	Y+6, r25	; 0x06
    2f96:	8d 83       	std	Y+5, r24	; 0x05
    2f98:	3f c0       	rjmp	.+126    	; 0x3018 <LCD_voidWriteChar+0x20c>
	else if (__tmp > 65535)
    2f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9c:	78 85       	ldd	r23, Y+8	; 0x08
    2f9e:	89 85       	ldd	r24, Y+9	; 0x09
    2fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
    2fa6:	4f e7       	ldi	r20, 0x7F	; 127
    2fa8:	57 e4       	ldi	r21, 0x47	; 71
    2faa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fae:	18 16       	cp	r1, r24
    2fb0:	4c f5       	brge	.+82     	; 0x3004 <LCD_voidWriteChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9e 83       	std	Y+6, r25	; 0x06
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	0f c0       	rjmp	.+30     	; 0x2ffa <LCD_voidWriteChar+0x1ee>
    2fdc:	88 ec       	ldi	r24, 0xC8	; 200
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	9c 83       	std	Y+4, r25	; 0x04
    2fe2:	8b 83       	std	Y+3, r24	; 0x03
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <LCD_voidWriteChar+0x1dc>
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	69 f7       	brne	.-38     	; 0x2fdc <LCD_voidWriteChar+0x1d0>
    3002:	14 c0       	rjmp	.+40     	; 0x302c <LCD_voidWriteChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3004:	6f 81       	ldd	r22, Y+7	; 0x07
    3006:	78 85       	ldd	r23, Y+8	; 0x08
    3008:	89 85       	ldd	r24, Y+9	; 0x09
    300a:	9a 85       	ldd	r25, Y+10	; 0x0a
    300c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	9e 83       	std	Y+6, r25	; 0x06
    3016:	8d 83       	std	Y+5, r24	; 0x05
    3018:	8d 81       	ldd	r24, Y+5	; 0x05
    301a:	9e 81       	ldd	r25, Y+6	; 0x06
    301c:	9a 83       	std	Y+2, r25	; 0x02
    301e:	89 83       	std	Y+1, r24	; 0x01
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	9a 81       	ldd	r25, Y+2	; 0x02
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <LCD_voidWriteChar+0x218>
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_LOW);
    302c:	83 e0       	ldi	r24, 0x03	; 3
    302e:	66 e0       	ldi	r22, 0x06	; 6
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>

#else
#error "Wrong choice"
#endif

}
    3036:	6d 96       	adiw	r28, 0x1d	; 29
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	cf 91       	pop	r28
    3044:	df 91       	pop	r29
    3046:	08 95       	ret

00003048 <LCD_voidWriteCommand>:

void LCD_voidWriteCommand(u8 Copy_u8Cmnd) {
    3048:	df 93       	push	r29
    304a:	cf 93       	push	r28
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	6d 97       	sbiw	r28, 0x1d	; 29
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_LOW);

#elif (LCD_u8_4BIT_MODE==LCD_u8_MODE)
	//1-Rs =0  	select Data Register
	DIO_u8SetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    305e:	83 e0       	ldi	r24, 0x03	; 3
    3060:	64 e0       	ldi	r22, 0x04	; 4
    3062:	40 e0       	ldi	r20, 0x00	; 0
    3064:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>

	//Rw =0 	Write Operation
	DIO_u8SetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    3068:	83 e0       	ldi	r24, 0x03	; 3
    306a:	65 e0       	ldi	r22, 0x05	; 5
    306c:	40 e0       	ldi	r20, 0x00	; 0
    306e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
	//3-Send 4_MSB Data byte to LCD
//	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd);
	PRIVATE_voidSetHalfPort(Copy_u8Cmnd);
    3072:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3074:	0e 94 3f 1a 	call	0x347e	; 0x347e <PRIVATE_voidSetHalfPort>
	//4-Enable
	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_HIGH);
    3078:	83 e0       	ldi	r24, 0x03	; 3
    307a:	66 e0       	ldi	r22, 0x06	; 6
    307c:	41 e0       	ldi	r20, 0x01	; 1
    307e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	a0 e0       	ldi	r26, 0x00	; 0
    3088:	b0 e4       	ldi	r27, 0x40	; 64
    308a:	89 8f       	std	Y+25, r24	; 0x19
    308c:	9a 8f       	std	Y+26, r25	; 0x1a
    308e:	ab 8f       	std	Y+27, r26	; 0x1b
    3090:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3092:	69 8d       	ldd	r22, Y+25	; 0x19
    3094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	4a ef       	ldi	r20, 0xFA	; 250
    30a0:	54 e4       	ldi	r21, 0x44	; 68
    30a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	8d 8b       	std	Y+21, r24	; 0x15
    30ac:	9e 8b       	std	Y+22, r25	; 0x16
    30ae:	af 8b       	std	Y+23, r26	; 0x17
    30b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30b2:	6d 89       	ldd	r22, Y+21	; 0x15
    30b4:	7e 89       	ldd	r23, Y+22	; 0x16
    30b6:	8f 89       	ldd	r24, Y+23	; 0x17
    30b8:	98 8d       	ldd	r25, Y+24	; 0x18
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e8       	ldi	r20, 0x80	; 128
    30c0:	5f e3       	ldi	r21, 0x3F	; 63
    30c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c6:	88 23       	and	r24, r24
    30c8:	2c f4       	brge	.+10     	; 0x30d4 <LCD_voidWriteCommand+0x8c>
		__ticks = 1;
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	9c 8b       	std	Y+20, r25	; 0x14
    30d0:	8b 8b       	std	Y+19, r24	; 0x13
    30d2:	3f c0       	rjmp	.+126    	; 0x3152 <LCD_voidWriteCommand+0x10a>
	else if (__tmp > 65535)
    30d4:	6d 89       	ldd	r22, Y+21	; 0x15
    30d6:	7e 89       	ldd	r23, Y+22	; 0x16
    30d8:	8f 89       	ldd	r24, Y+23	; 0x17
    30da:	98 8d       	ldd	r25, Y+24	; 0x18
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	3f ef       	ldi	r19, 0xFF	; 255
    30e0:	4f e7       	ldi	r20, 0x7F	; 127
    30e2:	57 e4       	ldi	r21, 0x47	; 71
    30e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30e8:	18 16       	cp	r1, r24
    30ea:	4c f5       	brge	.+82     	; 0x313e <LCD_voidWriteCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ec:	69 8d       	ldd	r22, Y+25	; 0x19
    30ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e2       	ldi	r20, 0x20	; 32
    30fa:	51 e4       	ldi	r21, 0x41	; 65
    30fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	9c 8b       	std	Y+20, r25	; 0x14
    3112:	8b 8b       	std	Y+19, r24	; 0x13
    3114:	0f c0       	rjmp	.+30     	; 0x3134 <LCD_voidWriteCommand+0xec>
    3116:	88 ec       	ldi	r24, 0xC8	; 200
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	9a 8b       	std	Y+18, r25	; 0x12
    311c:	89 8b       	std	Y+17, r24	; 0x11
    311e:	89 89       	ldd	r24, Y+17	; 0x11
    3120:	9a 89       	ldd	r25, Y+18	; 0x12
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <LCD_voidWriteCommand+0xda>
    3126:	9a 8b       	std	Y+18, r25	; 0x12
    3128:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312a:	8b 89       	ldd	r24, Y+19	; 0x13
    312c:	9c 89       	ldd	r25, Y+20	; 0x14
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	9c 8b       	std	Y+20, r25	; 0x14
    3132:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3134:	8b 89       	ldd	r24, Y+19	; 0x13
    3136:	9c 89       	ldd	r25, Y+20	; 0x14
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	69 f7       	brne	.-38     	; 0x3116 <LCD_voidWriteCommand+0xce>
    313c:	14 c0       	rjmp	.+40     	; 0x3166 <LCD_voidWriteCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313e:	6d 89       	ldd	r22, Y+21	; 0x15
    3140:	7e 89       	ldd	r23, Y+22	; 0x16
    3142:	8f 89       	ldd	r24, Y+23	; 0x17
    3144:	98 8d       	ldd	r25, Y+24	; 0x18
    3146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	9c 8b       	std	Y+20, r25	; 0x14
    3150:	8b 8b       	std	Y+19, r24	; 0x13
    3152:	8b 89       	ldd	r24, Y+19	; 0x13
    3154:	9c 89       	ldd	r25, Y+20	; 0x14
    3156:	98 8b       	std	Y+16, r25	; 0x10
    3158:	8f 87       	std	Y+15, r24	; 0x0f
    315a:	8f 85       	ldd	r24, Y+15	; 0x0f
    315c:	98 89       	ldd	r25, Y+16	; 0x10
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	f1 f7       	brne	.-4      	; 0x315e <LCD_voidWriteCommand+0x116>
    3162:	98 8b       	std	Y+16, r25	; 0x10
    3164:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_LOW);
    3166:	83 e0       	ldi	r24, 0x03	; 3
    3168:	66 e0       	ldi	r22, 0x06	; 6
    316a:	40 e0       	ldi	r20, 0x00	; 0
    316c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>

	//3-Send 4_LSB Data byte to LCD
//	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd << 4);
	PRIVATE_voidSetHalfPort(Copy_u8Cmnd<<4);
    3170:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3172:	82 95       	swap	r24
    3174:	80 7f       	andi	r24, 0xF0	; 240
    3176:	0e 94 3f 1a 	call	0x347e	; 0x347e <PRIVATE_voidSetHalfPort>
	//4-Enable
	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_HIGH);
    317a:	83 e0       	ldi	r24, 0x03	; 3
    317c:	66 e0       	ldi	r22, 0x06	; 6
    317e:	41 e0       	ldi	r20, 0x01	; 1
    3180:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	a0 e0       	ldi	r26, 0x00	; 0
    318a:	b0 e4       	ldi	r27, 0x40	; 64
    318c:	8b 87       	std	Y+11, r24	; 0x0b
    318e:	9c 87       	std	Y+12, r25	; 0x0c
    3190:	ad 87       	std	Y+13, r26	; 0x0d
    3192:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3194:	6b 85       	ldd	r22, Y+11	; 0x0b
    3196:	7c 85       	ldd	r23, Y+12	; 0x0c
    3198:	8d 85       	ldd	r24, Y+13	; 0x0d
    319a:	9e 85       	ldd	r25, Y+14	; 0x0e
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	4a ef       	ldi	r20, 0xFA	; 250
    31a2:	54 e4       	ldi	r21, 0x44	; 68
    31a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	8f 83       	std	Y+7, r24	; 0x07
    31ae:	98 87       	std	Y+8, r25	; 0x08
    31b0:	a9 87       	std	Y+9, r26	; 0x09
    31b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31b4:	6f 81       	ldd	r22, Y+7	; 0x07
    31b6:	78 85       	ldd	r23, Y+8	; 0x08
    31b8:	89 85       	ldd	r24, Y+9	; 0x09
    31ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e8       	ldi	r20, 0x80	; 128
    31c2:	5f e3       	ldi	r21, 0x3F	; 63
    31c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31c8:	88 23       	and	r24, r24
    31ca:	2c f4       	brge	.+10     	; 0x31d6 <LCD_voidWriteCommand+0x18e>
		__ticks = 1;
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	9e 83       	std	Y+6, r25	; 0x06
    31d2:	8d 83       	std	Y+5, r24	; 0x05
    31d4:	3f c0       	rjmp	.+126    	; 0x3254 <LCD_voidWriteCommand+0x20c>
	else if (__tmp > 65535)
    31d6:	6f 81       	ldd	r22, Y+7	; 0x07
    31d8:	78 85       	ldd	r23, Y+8	; 0x08
    31da:	89 85       	ldd	r24, Y+9	; 0x09
    31dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	3f ef       	ldi	r19, 0xFF	; 255
    31e2:	4f e7       	ldi	r20, 0x7F	; 127
    31e4:	57 e4       	ldi	r21, 0x47	; 71
    31e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ea:	18 16       	cp	r1, r24
    31ec:	4c f5       	brge	.+82     	; 0x3240 <LCD_voidWriteCommand+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e2       	ldi	r20, 0x20	; 32
    31fc:	51 e4       	ldi	r21, 0x41	; 65
    31fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9e 83       	std	Y+6, r25	; 0x06
    3214:	8d 83       	std	Y+5, r24	; 0x05
    3216:	0f c0       	rjmp	.+30     	; 0x3236 <LCD_voidWriteCommand+0x1ee>
    3218:	88 ec       	ldi	r24, 0xC8	; 200
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	9c 83       	std	Y+4, r25	; 0x04
    321e:	8b 83       	std	Y+3, r24	; 0x03
    3220:	8b 81       	ldd	r24, Y+3	; 0x03
    3222:	9c 81       	ldd	r25, Y+4	; 0x04
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	f1 f7       	brne	.-4      	; 0x3224 <LCD_voidWriteCommand+0x1dc>
    3228:	9c 83       	std	Y+4, r25	; 0x04
    322a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322c:	8d 81       	ldd	r24, Y+5	; 0x05
    322e:	9e 81       	ldd	r25, Y+6	; 0x06
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	9e 83       	std	Y+6, r25	; 0x06
    3234:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3236:	8d 81       	ldd	r24, Y+5	; 0x05
    3238:	9e 81       	ldd	r25, Y+6	; 0x06
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	69 f7       	brne	.-38     	; 0x3218 <LCD_voidWriteCommand+0x1d0>
    323e:	14 c0       	rjmp	.+40     	; 0x3268 <LCD_voidWriteCommand+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3240:	6f 81       	ldd	r22, Y+7	; 0x07
    3242:	78 85       	ldd	r23, Y+8	; 0x08
    3244:	89 85       	ldd	r24, Y+9	; 0x09
    3246:	9a 85       	ldd	r25, Y+10	; 0x0a
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9e 83       	std	Y+6, r25	; 0x06
    3252:	8d 83       	std	Y+5, r24	; 0x05
    3254:	8d 81       	ldd	r24, Y+5	; 0x05
    3256:	9e 81       	ldd	r25, Y+6	; 0x06
    3258:	9a 83       	std	Y+2, r25	; 0x02
    325a:	89 83       	std	Y+1, r24	; 0x01
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	9a 81       	ldd	r25, Y+2	; 0x02
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <LCD_voidWriteCommand+0x218>
    3264:	9a 83       	std	Y+2, r25	; 0x02
    3266:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_u8_EN_PORT, LCD_u8_EN_PIN, DIO_u8_LOW);
    3268:	83 e0       	ldi	r24, 0x03	; 3
    326a:	66 e0       	ldi	r22, 0x06	; 6
    326c:	40 e0       	ldi	r20, 0x00	; 0
    326e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>

#else
#error "Wrong choice"
#endif
}
    3272:	6d 96       	adiw	r28, 0x1d	; 29
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	f8 94       	cli
    3278:	de bf       	out	0x3e, r29	; 62
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	cd bf       	out	0x3d, r28	; 61
    327e:	cf 91       	pop	r28
    3280:	df 91       	pop	r29
    3282:	08 95       	ret

00003284 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_Pu8String) {
    3284:	df 93       	push	r29
    3286:	cf 93       	push	r28
    3288:	00 d0       	rcall	.+0      	; 0x328a <LCD_voidWriteString+0x6>
    328a:	00 d0       	rcall	.+0      	; 0x328c <LCD_voidWriteString+0x8>
    328c:	00 d0       	rcall	.+0      	; 0x328e <LCD_voidWriteString+0xa>
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
    3292:	9e 83       	std	Y+6, r25	; 0x06
    3294:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Index;

	for (Local_u32Index = 0; Copy_Pu8String[Local_u32Index] != 0;
    3296:	19 82       	std	Y+1, r1	; 0x01
    3298:	1a 82       	std	Y+2, r1	; 0x02
    329a:	1b 82       	std	Y+3, r1	; 0x03
    329c:	1c 82       	std	Y+4, r1	; 0x04
    329e:	15 c0       	rjmp	.+42     	; 0x32ca <LCD_voidWriteString+0x46>
			Local_u32Index++) {
		LCD_voidWriteChar(Copy_Pu8String[Local_u32Index]);
    32a0:	29 81       	ldd	r18, Y+1	; 0x01
    32a2:	3a 81       	ldd	r19, Y+2	; 0x02
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	9e 81       	ldd	r25, Y+6	; 0x06
    32a8:	fc 01       	movw	r30, r24
    32aa:	e2 0f       	add	r30, r18
    32ac:	f3 1f       	adc	r31, r19
    32ae:	80 81       	ld	r24, Z
    32b0:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LCD_voidWriteChar>

void LCD_voidWriteString(u8* Copy_Pu8String) {
	u32 Local_u32Index;

	for (Local_u32Index = 0; Copy_Pu8String[Local_u32Index] != 0;
			Local_u32Index++) {
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	9a 81       	ldd	r25, Y+2	; 0x02
    32b8:	ab 81       	ldd	r26, Y+3	; 0x03
    32ba:	bc 81       	ldd	r27, Y+4	; 0x04
    32bc:	01 96       	adiw	r24, 0x01	; 1
    32be:	a1 1d       	adc	r26, r1
    32c0:	b1 1d       	adc	r27, r1
    32c2:	89 83       	std	Y+1, r24	; 0x01
    32c4:	9a 83       	std	Y+2, r25	; 0x02
    32c6:	ab 83       	std	Y+3, r26	; 0x03
    32c8:	bc 83       	std	Y+4, r27	; 0x04
}

void LCD_voidWriteString(u8* Copy_Pu8String) {
	u32 Local_u32Index;

	for (Local_u32Index = 0; Copy_Pu8String[Local_u32Index] != 0;
    32ca:	29 81       	ldd	r18, Y+1	; 0x01
    32cc:	3a 81       	ldd	r19, Y+2	; 0x02
    32ce:	8d 81       	ldd	r24, Y+5	; 0x05
    32d0:	9e 81       	ldd	r25, Y+6	; 0x06
    32d2:	fc 01       	movw	r30, r24
    32d4:	e2 0f       	add	r30, r18
    32d6:	f3 1f       	adc	r31, r19
    32d8:	80 81       	ld	r24, Z
    32da:	88 23       	and	r24, r24
    32dc:	09 f7       	brne	.-62     	; 0x32a0 <LCD_voidWriteString+0x1c>
			Local_u32Index++) {
		LCD_voidWriteChar(Copy_Pu8String[Local_u32Index]);
	}
}
    32de:	26 96       	adiw	r28, 0x06	; 6
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <LCD_voidWritNumber>:

void LCD_voidWritNumber(u32 Copy_u32Number) {
    32f0:	ef 92       	push	r14
    32f2:	ff 92       	push	r15
    32f4:	0f 93       	push	r16
    32f6:	1f 93       	push	r17
    32f8:	df 93       	push	r29
    32fa:	cf 93       	push	r28
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	6d 97       	sbiw	r28, 0x1d	; 29
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	6a 8f       	std	Y+26, r22	; 0x1a
    330e:	7b 8f       	std	Y+27, r23	; 0x1b
    3310:	8c 8f       	std	Y+28, r24	; 0x1c
    3312:	9d 8f       	std	Y+29, r25	; 0x1d
	//local variables
	u8 local_u8Array_Asmpeller[16];
	u8 local_u8Length = 0;
    3314:	19 86       	std	Y+9, r1	; 0x09

	u32 local_u32num = Copy_u32Number;
    3316:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3318:	9b 8d       	ldd	r25, Y+27	; 0x1b
    331a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    331c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	9e 83       	std	Y+6, r25	; 0x06
    3322:	af 83       	std	Y+7, r26	; 0x07
    3324:	b8 87       	std	Y+8, r27	; 0x08
    3326:	15 c0       	rjmp	.+42     	; 0x3352 <LCD_voidWritNumber+0x62>
	u32 Local_u32Index;

	while (local_u32num != 0) {
		local_u8Length++;
    3328:	89 85       	ldd	r24, Y+9	; 0x09
    332a:	8f 5f       	subi	r24, 0xFF	; 255
    332c:	89 87       	std	Y+9, r24	; 0x09
		local_u32num /= 10;
    332e:	8d 81       	ldd	r24, Y+5	; 0x05
    3330:	9e 81       	ldd	r25, Y+6	; 0x06
    3332:	af 81       	ldd	r26, Y+7	; 0x07
    3334:	b8 85       	ldd	r27, Y+8	; 0x08
    3336:	2a e0       	ldi	r18, 0x0A	; 10
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e0       	ldi	r20, 0x00	; 0
    333c:	50 e0       	ldi	r21, 0x00	; 0
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 b5 1a 	call	0x356a	; 0x356a <__udivmodsi4>
    3346:	da 01       	movw	r26, r20
    3348:	c9 01       	movw	r24, r18
    334a:	8d 83       	std	Y+5, r24	; 0x05
    334c:	9e 83       	std	Y+6, r25	; 0x06
    334e:	af 83       	std	Y+7, r26	; 0x07
    3350:	b8 87       	std	Y+8, r27	; 0x08
	u8 local_u8Length = 0;

	u32 local_u32num = Copy_u32Number;
	u32 Local_u32Index;

	while (local_u32num != 0) {
    3352:	8d 81       	ldd	r24, Y+5	; 0x05
    3354:	9e 81       	ldd	r25, Y+6	; 0x06
    3356:	af 81       	ldd	r26, Y+7	; 0x07
    3358:	b8 85       	ldd	r27, Y+8	; 0x08
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	a1 05       	cpc	r26, r1
    335e:	b1 05       	cpc	r27, r1
    3360:	19 f7       	brne	.-58     	; 0x3328 <LCD_voidWritNumber+0x38>
		local_u8Length++;
		local_u32num /= 10;
	}

	//Split the whole number to units , tens , hundreds ,.... etc.
	for (Local_u32Index = 0; Copy_u32Number != 0; Local_u32Index++) {
    3362:	19 82       	std	Y+1, r1	; 0x01
    3364:	1a 82       	std	Y+2, r1	; 0x02
    3366:	1b 82       	std	Y+3, r1	; 0x03
    3368:	1c 82       	std	Y+4, r1	; 0x04
    336a:	46 c0       	rjmp	.+140    	; 0x33f8 <LCD_voidWritNumber+0x108>
		local_u8Array_Asmpeller[local_u8Length - (Local_u32Index + 1)] = '0'
    336c:	89 85       	ldd	r24, Y+9	; 0x09
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	40 e0       	ldi	r20, 0x00	; 0
    3374:	50 e0       	ldi	r21, 0x00	; 0
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	9a 81       	ldd	r25, Y+2	; 0x02
    337a:	ab 81       	ldd	r26, Y+3	; 0x03
    337c:	bc 81       	ldd	r27, Y+4	; 0x04
    337e:	80 95       	com	r24
    3380:	90 95       	com	r25
    3382:	a0 95       	com	r26
    3384:	b0 95       	com	r27
    3386:	79 01       	movw	r14, r18
    3388:	8a 01       	movw	r16, r20
    338a:	e8 0e       	add	r14, r24
    338c:	f9 1e       	adc	r15, r25
    338e:	0a 1f       	adc	r16, r26
    3390:	1b 1f       	adc	r17, r27
    3392:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3394:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3396:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3398:	bd 8d       	ldd	r27, Y+29	; 0x1d
    339a:	2a e0       	ldi	r18, 0x0A	; 10
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	40 e0       	ldi	r20, 0x00	; 0
    33a0:	50 e0       	ldi	r21, 0x00	; 0
    33a2:	bc 01       	movw	r22, r24
    33a4:	cd 01       	movw	r24, r26
    33a6:	0e 94 b5 1a 	call	0x356a	; 0x356a <__udivmodsi4>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	28 2f       	mov	r18, r24
    33b0:	20 5d       	subi	r18, 0xD0	; 208
    33b2:	ce 01       	movw	r24, r28
    33b4:	0a 96       	adiw	r24, 0x0a	; 10
    33b6:	fc 01       	movw	r30, r24
    33b8:	ee 0d       	add	r30, r14
    33ba:	ff 1d       	adc	r31, r15
    33bc:	20 83       	st	Z, r18
				+ (u8) (Copy_u32Number % 10); //convert integer to ascii
		Copy_u32Number /= 10;
    33be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33c2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    33c4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    33c6:	2a e0       	ldi	r18, 0x0A	; 10
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e0       	ldi	r20, 0x00	; 0
    33cc:	50 e0       	ldi	r21, 0x00	; 0
    33ce:	bc 01       	movw	r22, r24
    33d0:	cd 01       	movw	r24, r26
    33d2:	0e 94 b5 1a 	call	0x356a	; 0x356a <__udivmodsi4>
    33d6:	da 01       	movw	r26, r20
    33d8:	c9 01       	movw	r24, r18
    33da:	8a 8f       	std	Y+26, r24	; 0x1a
    33dc:	9b 8f       	std	Y+27, r25	; 0x1b
    33de:	ac 8f       	std	Y+28, r26	; 0x1c
    33e0:	bd 8f       	std	Y+29, r27	; 0x1d
		local_u8Length++;
		local_u32num /= 10;
	}

	//Split the whole number to units , tens , hundreds ,.... etc.
	for (Local_u32Index = 0; Copy_u32Number != 0; Local_u32Index++) {
    33e2:	89 81       	ldd	r24, Y+1	; 0x01
    33e4:	9a 81       	ldd	r25, Y+2	; 0x02
    33e6:	ab 81       	ldd	r26, Y+3	; 0x03
    33e8:	bc 81       	ldd	r27, Y+4	; 0x04
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	a1 1d       	adc	r26, r1
    33ee:	b1 1d       	adc	r27, r1
    33f0:	89 83       	std	Y+1, r24	; 0x01
    33f2:	9a 83       	std	Y+2, r25	; 0x02
    33f4:	ab 83       	std	Y+3, r26	; 0x03
    33f6:	bc 83       	std	Y+4, r27	; 0x04
    33f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33fc:	ac 8d       	ldd	r26, Y+28	; 0x1c
    33fe:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3400:	00 97       	sbiw	r24, 0x00	; 0
    3402:	a1 05       	cpc	r26, r1
    3404:	b1 05       	cpc	r27, r1
    3406:	09 f0       	breq	.+2      	; 0x340a <LCD_voidWritNumber+0x11a>
    3408:	b1 cf       	rjmp	.-158    	; 0x336c <LCD_voidWritNumber+0x7c>
		local_u8Array_Asmpeller[local_u8Length - (Local_u32Index + 1)] = '0'
				+ (u8) (Copy_u32Number % 10); //convert integer to ascii
		Copy_u32Number /= 10;
	}
	local_u8Array_Asmpeller[local_u8Length] = '\0';
    340a:	89 85       	ldd	r24, Y+9	; 0x09
    340c:	28 2f       	mov	r18, r24
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	ce 01       	movw	r24, r28
    3412:	0a 96       	adiw	r24, 0x0a	; 10
    3414:	fc 01       	movw	r30, r24
    3416:	e2 0f       	add	r30, r18
    3418:	f3 1f       	adc	r31, r19
    341a:	10 82       	st	Z, r1

	//sprintf(local_u8Array_Asmpeller,"%d",Copy_u32Number);//second method

	LCD_voidWriteString(local_u8Array_Asmpeller);
    341c:	ce 01       	movw	r24, r28
    341e:	0a 96       	adiw	r24, 0x0a	; 10
    3420:	0e 94 42 19 	call	0x3284	; 0x3284 <LCD_voidWriteString>

}
    3424:	6d 96       	adiw	r28, 0x1d	; 29
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	1f 91       	pop	r17
    3436:	0f 91       	pop	r16
    3438:	ff 90       	pop	r15
    343a:	ef 90       	pop	r14
    343c:	08 95       	ret

0000343e <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos) {
    343e:	df 93       	push	r29
    3440:	cf 93       	push	r28
    3442:	00 d0       	rcall	.+0      	; 0x3444 <LCD_voidGoToXY+0x6>
    3444:	0f 92       	push	r0
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
    344a:	8a 83       	std	Y+2, r24	; 0x02
    344c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if (Copy_u8YPos == LCD_u8_LINE_1) {
    344e:	8b 81       	ldd	r24, Y+3	; 0x03
    3450:	88 23       	and	r24, r24
    3452:	19 f4       	brne	.+6      	; 0x345a <LCD_voidGoToXY+0x1c>
		Local_u8Address = Copy_u8XPos;
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	89 83       	std	Y+1, r24	; 0x01
    3458:	06 c0       	rjmp	.+12     	; 0x3466 <LCD_voidGoToXY+0x28>
	} else if (Copy_u8YPos == LCD_u8_LINE_2) {
    345a:	8b 81       	ldd	r24, Y+3	; 0x03
    345c:	81 30       	cpi	r24, 0x01	; 1
    345e:	19 f4       	brne	.+6      	; 0x3466 <LCD_voidGoToXY+0x28>
		Local_u8Address = Copy_u8XPos + 0x40;
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	80 5c       	subi	r24, 0xC0	; 192
    3464:	89 83       	std	Y+1, r24	; 0x01
	}

	LCD_voidWriteCommand(SET_BIT(Local_u8Address, 7));
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	80 68       	ori	r24, 0x80	; 128
    346a:	89 83       	std	Y+1, r24	; 0x01
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_voidWriteCommand>

}
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	cf 91       	pop	r28
    347a:	df 91       	pop	r29
    347c:	08 95       	ret

0000347e <PRIVATE_voidSetHalfPort>:

static void PRIVATE_voidSetHalfPort(u8 Copy_u8Data) {
    347e:	df 93       	push	r29
    3480:	cf 93       	push	r28
    3482:	0f 92       	push	r0
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
    3488:	89 83       	std	Y+1, r24	; 0x01
	if (GET_BIT(Copy_u8Data, 7)) {
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	88 23       	and	r24, r24
    348e:	34 f4       	brge	.+12     	; 0x349c <PRIVATE_voidSetHalfPort+0x1e>
		DIO_u8SetPinValue(LCD_u8_PD7_PORT, LCD_u8_PD7_PIN, DIO_u8_HIGH);
    3490:	83 e0       	ldi	r24, 0x03	; 3
    3492:	63 e0       	ldi	r22, 0x03	; 3
    3494:	41 e0       	ldi	r20, 0x01	; 1
    3496:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
    349a:	05 c0       	rjmp	.+10     	; 0x34a6 <PRIVATE_voidSetHalfPort+0x28>
	} else {
		DIO_u8SetPinValue(LCD_u8_PD7_PORT, LCD_u8_PD7_PIN, DIO_u8_LOW);
    349c:	83 e0       	ldi	r24, 0x03	; 3
    349e:	63 e0       	ldi	r22, 0x03	; 3
    34a0:	40 e0       	ldi	r20, 0x00	; 0
    34a2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
	}
	if (GET_BIT(Copy_u8Data, 6)) {
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	82 95       	swap	r24
    34aa:	86 95       	lsr	r24
    34ac:	86 95       	lsr	r24
    34ae:	83 70       	andi	r24, 0x03	; 3
    34b0:	88 2f       	mov	r24, r24
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	81 70       	andi	r24, 0x01	; 1
    34b6:	90 70       	andi	r25, 0x00	; 0
    34b8:	88 23       	and	r24, r24
    34ba:	31 f0       	breq	.+12     	; 0x34c8 <PRIVATE_voidSetHalfPort+0x4a>
		DIO_u8SetPinValue(LCD_u8_PD6_PORT, LCD_u8_PD6_PIN, DIO_u8_HIGH);
    34bc:	83 e0       	ldi	r24, 0x03	; 3
    34be:	62 e0       	ldi	r22, 0x02	; 2
    34c0:	41 e0       	ldi	r20, 0x01	; 1
    34c2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
    34c6:	05 c0       	rjmp	.+10     	; 0x34d2 <PRIVATE_voidSetHalfPort+0x54>
	} else {
		DIO_u8SetPinValue(LCD_u8_PD6_PORT, LCD_u8_PD6_PIN, DIO_u8_LOW);
    34c8:	83 e0       	ldi	r24, 0x03	; 3
    34ca:	62 e0       	ldi	r22, 0x02	; 2
    34cc:	40 e0       	ldi	r20, 0x00	; 0
    34ce:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
	}

	if (GET_BIT(Copy_u8Data, 5)) {
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	82 95       	swap	r24
    34d6:	86 95       	lsr	r24
    34d8:	87 70       	andi	r24, 0x07	; 7
    34da:	88 2f       	mov	r24, r24
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	81 70       	andi	r24, 0x01	; 1
    34e0:	90 70       	andi	r25, 0x00	; 0
    34e2:	88 23       	and	r24, r24
    34e4:	31 f0       	breq	.+12     	; 0x34f2 <PRIVATE_voidSetHalfPort+0x74>
		DIO_u8SetPinValue(LCD_u8_PD5_PORT, LCD_u8_PD5_PIN, DIO_u8_HIGH);
    34e6:	83 e0       	ldi	r24, 0x03	; 3
    34e8:	61 e0       	ldi	r22, 0x01	; 1
    34ea:	41 e0       	ldi	r20, 0x01	; 1
    34ec:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
    34f0:	05 c0       	rjmp	.+10     	; 0x34fc <PRIVATE_voidSetHalfPort+0x7e>
	} else {
		DIO_u8SetPinValue(LCD_u8_PD5_PORT, LCD_u8_PD5_PIN, DIO_u8_LOW);
    34f2:	83 e0       	ldi	r24, 0x03	; 3
    34f4:	61 e0       	ldi	r22, 0x01	; 1
    34f6:	40 e0       	ldi	r20, 0x00	; 0
    34f8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
	}

	if (GET_BIT(Copy_u8Data, 4)) {
    34fc:	89 81       	ldd	r24, Y+1	; 0x01
    34fe:	82 95       	swap	r24
    3500:	8f 70       	andi	r24, 0x0F	; 15
    3502:	88 2f       	mov	r24, r24
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	81 70       	andi	r24, 0x01	; 1
    3508:	90 70       	andi	r25, 0x00	; 0
    350a:	88 23       	and	r24, r24
    350c:	31 f0       	breq	.+12     	; 0x351a <PRIVATE_voidSetHalfPort+0x9c>
		DIO_u8SetPinValue(LCD_u8_PD4_PORT, LCD_u8_PD4_PIN, DIO_u8_HIGH);
    350e:	83 e0       	ldi	r24, 0x03	; 3
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	41 e0       	ldi	r20, 0x01	; 1
    3514:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
    3518:	05 c0       	rjmp	.+10     	; 0x3524 <PRIVATE_voidSetHalfPort+0xa6>
	} else {
		DIO_u8SetPinValue(LCD_u8_PD4_PORT, LCD_u8_PD4_PIN, DIO_u8_LOW);
    351a:	83 e0       	ldi	r24, 0x03	; 3
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	40 e0       	ldi	r20, 0x00	; 0
    3520:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinValue>
	}

}
    3524:	0f 90       	pop	r0
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	08 95       	ret

0000352c <__mulsi3>:
    352c:	62 9f       	mul	r22, r18
    352e:	d0 01       	movw	r26, r0
    3530:	73 9f       	mul	r23, r19
    3532:	f0 01       	movw	r30, r0
    3534:	82 9f       	mul	r24, r18
    3536:	e0 0d       	add	r30, r0
    3538:	f1 1d       	adc	r31, r1
    353a:	64 9f       	mul	r22, r20
    353c:	e0 0d       	add	r30, r0
    353e:	f1 1d       	adc	r31, r1
    3540:	92 9f       	mul	r25, r18
    3542:	f0 0d       	add	r31, r0
    3544:	83 9f       	mul	r24, r19
    3546:	f0 0d       	add	r31, r0
    3548:	74 9f       	mul	r23, r20
    354a:	f0 0d       	add	r31, r0
    354c:	65 9f       	mul	r22, r21
    354e:	f0 0d       	add	r31, r0
    3550:	99 27       	eor	r25, r25
    3552:	72 9f       	mul	r23, r18
    3554:	b0 0d       	add	r27, r0
    3556:	e1 1d       	adc	r30, r1
    3558:	f9 1f       	adc	r31, r25
    355a:	63 9f       	mul	r22, r19
    355c:	b0 0d       	add	r27, r0
    355e:	e1 1d       	adc	r30, r1
    3560:	f9 1f       	adc	r31, r25
    3562:	bd 01       	movw	r22, r26
    3564:	cf 01       	movw	r24, r30
    3566:	11 24       	eor	r1, r1
    3568:	08 95       	ret

0000356a <__udivmodsi4>:
    356a:	a1 e2       	ldi	r26, 0x21	; 33
    356c:	1a 2e       	mov	r1, r26
    356e:	aa 1b       	sub	r26, r26
    3570:	bb 1b       	sub	r27, r27
    3572:	fd 01       	movw	r30, r26
    3574:	0d c0       	rjmp	.+26     	; 0x3590 <__udivmodsi4_ep>

00003576 <__udivmodsi4_loop>:
    3576:	aa 1f       	adc	r26, r26
    3578:	bb 1f       	adc	r27, r27
    357a:	ee 1f       	adc	r30, r30
    357c:	ff 1f       	adc	r31, r31
    357e:	a2 17       	cp	r26, r18
    3580:	b3 07       	cpc	r27, r19
    3582:	e4 07       	cpc	r30, r20
    3584:	f5 07       	cpc	r31, r21
    3586:	20 f0       	brcs	.+8      	; 0x3590 <__udivmodsi4_ep>
    3588:	a2 1b       	sub	r26, r18
    358a:	b3 0b       	sbc	r27, r19
    358c:	e4 0b       	sbc	r30, r20
    358e:	f5 0b       	sbc	r31, r21

00003590 <__udivmodsi4_ep>:
    3590:	66 1f       	adc	r22, r22
    3592:	77 1f       	adc	r23, r23
    3594:	88 1f       	adc	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	1a 94       	dec	r1
    359a:	69 f7       	brne	.-38     	; 0x3576 <__udivmodsi4_loop>
    359c:	60 95       	com	r22
    359e:	70 95       	com	r23
    35a0:	80 95       	com	r24
    35a2:	90 95       	com	r25
    35a4:	9b 01       	movw	r18, r22
    35a6:	ac 01       	movw	r20, r24
    35a8:	bd 01       	movw	r22, r26
    35aa:	cf 01       	movw	r24, r30
    35ac:	08 95       	ret

000035ae <__prologue_saves__>:
    35ae:	2f 92       	push	r2
    35b0:	3f 92       	push	r3
    35b2:	4f 92       	push	r4
    35b4:	5f 92       	push	r5
    35b6:	6f 92       	push	r6
    35b8:	7f 92       	push	r7
    35ba:	8f 92       	push	r8
    35bc:	9f 92       	push	r9
    35be:	af 92       	push	r10
    35c0:	bf 92       	push	r11
    35c2:	cf 92       	push	r12
    35c4:	df 92       	push	r13
    35c6:	ef 92       	push	r14
    35c8:	ff 92       	push	r15
    35ca:	0f 93       	push	r16
    35cc:	1f 93       	push	r17
    35ce:	cf 93       	push	r28
    35d0:	df 93       	push	r29
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	ca 1b       	sub	r28, r26
    35d8:	db 0b       	sbc	r29, r27
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	09 94       	ijmp

000035e6 <__epilogue_restores__>:
    35e6:	2a 88       	ldd	r2, Y+18	; 0x12
    35e8:	39 88       	ldd	r3, Y+17	; 0x11
    35ea:	48 88       	ldd	r4, Y+16	; 0x10
    35ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    35ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    35f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    35f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    35f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    35f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    35f8:	b9 84       	ldd	r11, Y+9	; 0x09
    35fa:	c8 84       	ldd	r12, Y+8	; 0x08
    35fc:	df 80       	ldd	r13, Y+7	; 0x07
    35fe:	ee 80       	ldd	r14, Y+6	; 0x06
    3600:	fd 80       	ldd	r15, Y+5	; 0x05
    3602:	0c 81       	ldd	r16, Y+4	; 0x04
    3604:	1b 81       	ldd	r17, Y+3	; 0x03
    3606:	aa 81       	ldd	r26, Y+2	; 0x02
    3608:	b9 81       	ldd	r27, Y+1	; 0x01
    360a:	ce 0f       	add	r28, r30
    360c:	d1 1d       	adc	r29, r1
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	f8 94       	cli
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	cd bf       	out	0x3d, r28	; 61
    3618:	ed 01       	movw	r28, r26
    361a:	08 95       	ret

0000361c <_exit>:
    361c:	f8 94       	cli

0000361e <__stop_program>:
    361e:	ff cf       	rjmp	.-2      	; 0x361e <__stop_program>
